calib_data$june = ifelse(str_detect(calib_data[,4], "june"), 1, 0)
calib_data$aug = ifelse(str_detect(calib_data[,4], "aug"), 1, 0)
calib_data = calib_data[,-4]
### HEIARCHICAL MODEL ###
library(stringr)
library(dplyr)
library(pracma)
library(MASS)
# MONTH 1 (2018_6 / JUNE) CALIBRATED DATA FRAME
<<<<<<< HEAD
# Mac Directory
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_6")
deriv_complete=read.csv(file = "2018_6_1_qPCR_Output.csv", header=FALSE)
deriv = deriv_complete
# Remove extra labels column
deriv = deriv[,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=FALSE)
# Rename columns
colnames(deriv)=c("plateID", "reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
### Removing NTC and gblock-Minus values ###
# Indicate if sample is NTC (negative control)
deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# Remove NTC samples, indicator (T/F) column, and cpD2 values
ntc = which(deriv$sampleID_NTC)
deriv = deriv[-ntc,]
deriv = deriv[,-c(6,7)]
# Indicate if sample is 'Plus' or 'Minus'
deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
minus = which(deriv$sampleID_Minus)
deriv = deriv[-minus,]
deriv = deriv[,-6]
deriv$cpD1 = as.numeric(as.character(deriv$cpD1))
# Remove unusual observations from initial data frame (CT value less than 10)
deriv = deriv %>% filter(deriv$cpD1 >= 10)
# Create data frame for Calibrated values
calib_data = deriv %>% filter(str_detect(sampleID, "g"))
# Sort by starting quantity
calib_data = calib_data[order(calib_data$starting_quantity),]
calib_data$starting_quantity = as.numeric(as.character(calib_data$starting_quantity))
calib_data$cpD1 = as.numeric(as.character(calib_data$cpD1))
# Create empty vectors for for-loop to input cpD1 values
test1 = c()
allP = c()
startq = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(calib_data$starting_quantity)){
sq <- calib_data$starting_quantity[i]
if(i %% 6 == 1){
startq = c(startq,sq,sq,sq)
}
val <- toString(calib_data$reaction_type[i])
if(strcmp(val, "test1")){
test1 = c(test1, calib_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP = c(allP, calib_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by starting quantity
calib_data = as.data.frame(cbind(startq, test1, allP))
# Format starting quantity values as decimals, not scientific notation
calib_data$startq=as.factor(format(calib_data$startq, scientific=FALSE))
calib_data$startq=as.factor(calib_data$startq)
# Append ratios to data set
calib_data_6 =calib_data
# Create month indicator column
calib_data_6$month = strrep('june', length(calib_data_6))
=======
calib_data_6 = read.csv("./2018_6/calib_2018_6.csv")[,-1]
calib_data_6$month ='june'
>>>>>>> 5f33e18e3fce60a5c0d91821babf3d5b9f6982a3
calib_data_6
# MONTH 2 (2018_8 / AUGUST) CALIBRATED DATA FRAME
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_8")
calib_data_8 = read.csv("./2018_8/calib_2018_8.csv")[,-1]
calib_data_8$month ='aug'
calib_data_8
# MONTH 3 (2018_11 / NOVEMBER) CALIBRATED DATA FRAME
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_11")
calib_data_11 = read.csv("./2018_11/calib_2018_11.csv")[,-1]
calib_data_11$month ='nov'
calib_data_11
# Combined Calib d.f. for all months
calib_data = rbind(calib_data_6, calib_data_8, calib_data_11)
library(stringr)
library(dplyr)
library(pracma)
library(MASS)
# MONTH 1 (2018_6 / JUNE) CALIBRATED DATA FRAME
<<<<<<< HEAD
# Mac Directory
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_6")
# MONTH 1 (2018_6 / JUNE) CALIBRATED DATA FRAME
<<<<<<< HEAD
# Mac Directory
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_6")
deriv_complete=read.csv(file = "2018_6_1_qPCR_Output.csv", header=FALSE)
deriv = deriv_complete
# Remove extra labels column
deriv = deriv[,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=FALSE)
# Rename columns
colnames(deriv)=c("plateID", "reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
### Removing NTC and gblock-Minus values ###
# Indicate if sample is NTC (negative control)
deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# Remove NTC samples, indicator (T/F) column, and cpD2 values
ntc = which(deriv$sampleID_NTC)
deriv = deriv[-ntc,]
deriv = deriv[,-c(6,7)]
# Indicate if sample is 'Plus' or 'Minus'
deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
minus = which(deriv$sampleID_Minus)
deriv = deriv[-minus,]
deriv = deriv[,-6]
deriv$cpD1 = as.numeric(as.character(deriv$cpD1))
# Remove unusual observations from initial data frame (CT value less than 10)
deriv = deriv %>% filter(deriv$cpD1 >= 10)
# Create data frame for Calibrated values
calib_data = deriv %>% filter(str_detect(sampleID, "g"))
# Sort by starting quantity
calib_data = calib_data[order(calib_data$starting_quantity),]
calib_data$starting_quantity = as.numeric(as.character(calib_data$starting_quantity))
calib_data$cpD1 = as.numeric(as.character(calib_data$cpD1))
# Create empty vectors for for-loop to input cpD1 values
test1 = c()
allP = c()
startq = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(calib_data$starting_quantity)){
sq <- calib_data$starting_quantity[i]
if(i %% 6 == 1){
startq = c(startq,sq,sq,sq)
}
val <- toString(calib_data$reaction_type[i])
if(strcmp(val, "test1")){
test1 = c(test1, calib_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP = c(allP, calib_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by starting quantity
calib_data = as.data.frame(cbind(startq, test1, allP))
# Format starting quantity values as decimals, not scientific notation
calib_data$startq=as.factor(format(calib_data$startq, scientific=FALSE))
calib_data$startq=as.factor(calib_data$startq)
# Append ratios to data set
calib_data_6 =calib_data
# Create month indicator column
calib_data_6$month = strrep('june', length(calib_data_6))
=======
calib_data_6 = read.csv("./2018_6/calib_2018_6.csv")[,-1]
=======
calib_data_6 = read.csv("calib_2018_6.csv")[,-1]
# }
# # Bind test1 and allProd cpD1 values by starting quantity
# calib_data = as.data.frame(cbind(startq, test1, allP))
# # Format starting quantity values as decimals, not scientific notation
# calib_data$startq=as.factor(format(calib_data$startq, scientific=FALSE))
# calib_data$startq=as.factor(calib_data$startq)
# # Append ratios to data set
# calib_data_6 =calib_data
# # Create month indicator column
# calib_data_6$month = strrep('june', length(calib_data_6))
=======
calib_data_6 = read.csv("calib_2018_6.csv")[,-1]
# # Bind test1 and allProd cpD1 values by starting quantity
# calib_data = as.data.frame(cbind(startq, test1, allP))
# # Format starting quantity values as decimals, not scientific notation
# calib_data$startq=as.factor(format(calib_data$startq, scientific=FALSE))
# calib_data$startq=as.factor(calib_data$startq)
# # Append ratios to data set
# calib_data_6 =calib_data
# # Create month indicator column
# calib_data_6$month = strrep('june', length(calib_data_6))
# =======
calib_data_6 = read.csv("calib_2018_6.csv")[,-1]
calib_data_6$month ='june'
#>>>>>>> 5f33e18e3fce60a5c0d91821babf3d5b9f6982a3
calib_data_6
# MONTH 2 (2018_8 / AUGUST) CALIBRATED DATA FRAME
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_8")
calib_data_8 = read.csv("./2018_8/calib_2018_8.csv")[,-1]
calib_data_8 = read.csv("calib_2018_8.csv")[,-1]
calib_data_8$month ='aug'
calib_data_8
# MONTH 3 (2018_11 / NOVEMBER) CALIBRATED DATA FRAME
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_11")
calib_data_11 = read.csv("calib_2018_11.csv")[,-1]
calib_data_11$month ='nov'
calib_data_11
# Combined Calib d.f. for all months
calib_data = rbind(calib_data_6, calib_data_8, calib_data_11)
View(calib_data_6)
##########################################################
############## QPCR PLATE & ADJUSTMENT MODEL #############
##########################################################
library(tidyr)
library(pracma)
library(stringr)
library(tidyverse)
library(dplyr)
library(MASS)
library(glm.predict)
library(Stack)
# Mac Directory
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_6")
#setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_(MONTH)")
# PC Directory
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing/qPCR")
### READ IN DERIVATIVE DATA ###
# In the case of having two separate CSV files of calculated derivatives,
# use this code to combine, prior to the following transpositions:
#deriv.1<-read.csv(file = "2018_11_1_plate_qPCR_output.csv", header=FALSE)
#deriv.2<-read.csv(file = "2018_11_2_plate_qPCR_output.csv", header=FALSE)
#deriv=cbind(deriv.1, deriv.2)
# In the case of having one CSV containing calculated derivatives, use this code:
#deriv=read.csv(file = "(YEAR_MONTH_PLATE_qPCR_output.csv", header=FALSE)
deriv_complete=read.csv(file = "2018_6_1_qPCR_Output.csv", header=FALSE)
##########################################################
################### Initial Data Framing #################
##########################################################
deriv = deriv_complete
# Remove extra labels column
deriv = deriv[,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=FALSE)
# Remove blank column (4th)
#deriv = deriv[,-5]
# Rename columns
colnames(deriv)=c("plateID", "reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
### Removing NTC and gblock-Minus values ###
# Indicate if sample is NTC (negative control)
deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# Remove NTC samples, indicator (T/F) column, and cpD2 values
ntc = which(deriv$sampleID_NTC)
deriv = deriv[-ntc,]
deriv = deriv[,-c(6,7)]
# Indicate if sample is 'Plus' or 'Minus'
deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
minus = which(deriv$sampleID_Minus)
deriv = deriv[-minus,]
deriv = deriv[,-6]
deriv$cpD1 = as.numeric(as.character(deriv$cpD1))
### COMPLETED INITIAL DATA FRAMING ###
##########################################################
############ Removing Ununsual Observations ##############
##########################################################
# Remove unusual observations from initial data frame (CT value less than 10)
deriv = deriv %>% filter(deriv$cpD1 >= 10)
# Read in raw cycle data - may need to combine multiple files
cycle1 = read.csv(file = "2018_6_1_plate.csv", header = FALSE)
# Create complete set of reaction data (derivative and cycle)
reaction = Stack(deriv_complete, cycle1)
# Remove repeat labeling
replace = reaction[7:10,]
reaction = reaction[-c(1:4, 7:10),]
reaction = Stack(replace, reaction)
# Transpose so column headers at top
reaction = as.data.frame(t(reaction))
reaction = reaction[,-c(6:7)]
# Replace column names with first row
colnames(reaction) <- as.character(unlist(reaction[1,]))
reaction = reaction[-1,]
colnames(reaction)[5] = "cpD1"
reaction$cpD1 = as.numeric(as.character(reaction$cpD1))
# Filter unusual observations (CT value less than 10)
unusual_obs_2018_6 = reaction %>% filter(reaction$cpD1 < 10)
# Write CSV file
#write.csv(unusual_obs_2018_6, file="Unusual_Obs_2018_6.csv")
# ### COMPLETED UNUSUAL OBSERVATIONS REMOVAL/REPORTING ###
##########################################################
################# Calibrated Data Framing ################
##########################################################
library("rowr")
# Create/Write data frame for Calibrated values
calib_data = deriv %>% filter(str_detect(sampleID, "g"))
# Sort by starting quantity
calib_data = calib_data[order(calib_data$starting_quantity),]
calib_data$starting_quantity = as.numeric(as.character(calib_data$starting_quantity))
calib_data$cpD1 = as.numeric(as.character(calib_data$cpD1))
test1 = filter(calib_data, reaction_type=="test1")[,5]
allP = filter(calib_data, reaction_type=="all_products")[,4:5]
#Combine test1 and allP obs, with NA in blank cells
calib_data = as.data.frame(cbind.fill(allP, test1, fill = NA))
colnames(calib_data) = c("startq", 'allP', "test1" )
# Format starting quantity values as decimals, not scientific notation
calib_data$startq=as.factor(format(calib_data$startq, scientific=FALSE))
calib_data$startq=as.factor(calib_data$startq)
write.csv(calib_data, file = "calib_2018_6.csv")
### HEIARCHICAL MODEL ###
library(stringr)
library(dplyr)
library(pracma)
library(MASS)
# MONTH 1 (2018_6 / JUNE) CALIBRATED DATA FRAME
# <<<<<<< HEAD
# # Mac Directory
# setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_6")
# deriv_complete=read.csv(file = "2018_6_1_qPCR_Output.csv", header=FALSE)
# deriv = deriv_complete
# # Remove extra labels column
# deriv = deriv[,-1]
# # Transpose derivatives to be in equivalent format as raw plate data
# deriv = as.data.frame(t(deriv), header=FALSE)
# # Rename columns
# colnames(deriv)=c("plateID", "reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
# ### Removing NTC and gblock-Minus values ###
# # Indicate if sample is NTC (negative control)
# deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# # Remove NTC samples, indicator (T/F) column, and cpD2 values
# ntc = which(deriv$sampleID_NTC)
# deriv = deriv[-ntc,]
# deriv = deriv[,-c(6,7)]
# # Indicate if sample is 'Plus' or 'Minus'
# deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# # Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
# minus = which(deriv$sampleID_Minus)
# deriv = deriv[-minus,]
# deriv = deriv[,-6]
# deriv$cpD1 = as.numeric(as.character(deriv$cpD1))
# # Remove unusual observations from initial data frame (CT value less than 10)
# deriv = deriv %>% filter(deriv$cpD1 >= 10)
# # Create data frame for Calibrated values
# calib_data = deriv %>% filter(str_detect(sampleID, "g"))
# # Sort by starting quantity
# calib_data = calib_data[order(calib_data$starting_quantity),]
# calib_data$starting_quantity = as.numeric(as.character(calib_data$starting_quantity))
# calib_data$cpD1 = as.numeric(as.character(calib_data$cpD1))
# # Create empty vectors for for-loop to input cpD1 values
# test1 = c()
# allP = c()
# startq = c()
# # For loop -- iterating thru starting quantity and reaction type to return cpD1 values
# for(i in 1:length(calib_data$starting_quantity)){
#   sq <- calib_data$starting_quantity[i]
#   if(i %% 6 == 1){
#     startq = c(startq,sq,sq,sq)
#   }
#   val <- toString(calib_data$reaction_type[i])
#   if(strcmp(val, "test1")){
#     test1 = c(test1, calib_data$cpD1[i])
#   }
#   if(strcmp(val, "all_products")){
#     allP = c(allP, calib_data$cpD1[i])
#   }
# }
# # Bind test1 and allProd cpD1 values by starting quantity
# calib_data = as.data.frame(cbind(startq, test1, allP))
# # Format starting quantity values as decimals, not scientific notation
# calib_data$startq=as.factor(format(calib_data$startq, scientific=FALSE))
# calib_data$startq=as.factor(calib_data$startq)
# # Append ratios to data set
# calib_data_6 =calib_data
# # Create month indicator column
# calib_data_6$month = strrep('june', length(calib_data_6))
# =======
calib_data_6 = read.csv("calib_2018_6.csv")[,-1]
calib_data_6$month ='june'
#>>>>>>> 5f33e18e3fce60a5c0d91821babf3d5b9f6982a3
calib_data_6
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_8")
calib_data_8 = read.csv("calib_2018_8.csv")[,-1]
calib_data_8$month ='aug'
calib_data_8
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_11")
calib_data_11 = read.csv("calib_2018_11.csv")[,-1]
calib_data_11$month ='nov'
calib_data_11
# Combined Calib d.f. for all months
calib_data = rbind(calib_data_6, calib_data_8, calib_data_11)
# Create dummy varible columns for each month
calib_data$june = ifelse(str_detect(calib_data[,4], "june"), 1, 0)
calib_data$aug = ifelse(str_detect(calib_data[,4], "aug"), 1, 0)
calib_data = calib_data[,-4]
View(calib_data)
View(calib_data)
# Ordinal Logistic Regression Model
model = polr(as.factor(calib_data$startq) ~ ., data=calib_data, Hess = TRUE)
(summary(model))
(ctable <- coef(summary(model)))
# Ordinal Logistic Regression Model
model = polr(as.factor(calib_data$startq) ~ ., data=calib_data, Hess = TRUE)
# OLRM - SQ ~ Test1
model = polr(as.factor(calib_data$startq) ~ calib_data$test1, data=calib_data, Hess = TRUE)
# OLRM - SQ ~ Test1
model = polr(as.factor(calib_data$startq) ~ calib_data$test1, Hess = TRUE)
(summary(model))
# Drop rows containing NA
calib_data = drop_na(calib_data)
# Ordinal Logistic Regression Model
model = polr(as.factor(calib_data$startq) ~ ., data=calib_data, Hess = TRUE)
(summary(model))
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
# Linear Model
lin_model = lm(as.factor(calib_data$startq) ~ ., data=calib_data)
lin_model
# Ordinal Logistic Regression Model
model = polr(as.factor(calib_data$startq) ~ ., data=calib_data, Hess = TRUE)
(summary(model))
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
model = polr(as.factor(calib_data$startq) ~ ., data=calib_data, Hess = TRUE)
#(summary(model))
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
# Linear Model
lin_model = lm(as.factor(calib_data$startq) ~ ., data=calib_data)
lin_model
# OLRM - SQ ~ Test1
model = polr(as.factor(calib_data$startq) ~ calib_data$test1, Hess = TRUE)
(summary(model))
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
# Ordinal Logistic Regression Model
model = polr(as.factor(calib_data$startq) ~ ., data=calib_data, Hess = TRUE)
#(summary(model))
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
library(stringr)
library(dplyr)
library(pracma)
library(MASS)
calib_data_6 = read.csv("calib_2018_6.csv")[,-1]
calib_data_6$month ='june'
#>>>>>>> 5f33e18e3fce60a5c0d91821babf3d5b9f6982a3
calib_data_6
# MONTH 2 (2018_8 / AUGUST) CALIBRATED DATA FRAME
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_8")
calib_data_8 = read.csv("calib_2018_8.csv")[,-1]
calib_data_8$month ='aug'
calib_data_8
# MONTH 3 (2018_11 / NOVEMBER) CALIBRATED DATA FRAME
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_11")
calib_data_11 = read.csv("calib_2018_11.csv")[,-1]
calib_data_11$month ='nov'
calib_data_11
# Combined Calib d.f. for all months
calib_data = rbind(calib_data_6, calib_data_8, calib_data_11)
# Create dummy varible columns for each month
calib_data$june = ifelse(str_detect(calib_data[,4], "june"), 1, 0)
calib_data$aug = ifelse(str_detect(calib_data[,4], "aug"), 1, 0)
calib_data = calib_data[,-4]
View(calib_data)
# Drop rows containing NA
calib_data = drop_na(calib_data)
# Ordinal Logistic Regression Model
model = polr(as.factor(calib_data$startq) ~ ., data=calib_data, Hess = TRUE)
#(summary(model))
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
# Linear Model
lin_model = lm(as.factor(calib_data$startq) ~ ., data=calib_data)
lin_model
# OLRM - SQ ~ Test1
model = polr(as.factor(calib_data$startq) ~ calib_data$test1, Hess = TRUE)
(summary(model))
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
# OLRM - SQ ~ Test1
model = polr(as.factor(calib_data$startq) ~ calib_data$test1, Hess = TRUE)
#(summary(model))
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
# OLRM - SQ ~ allP
model = polr(as.factor(calib_data$startq) ~ calib_data$allP, Hess = TRUE)
#(summary(model))
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
