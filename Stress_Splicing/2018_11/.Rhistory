center(z,3)
dat <- read.csv(file = "data/inflammation-01.csv", header = FALSE)
centered <- center(dat[, 4], 0)
head(centered)
install.packages("qtl2", repos="http://rqtl.org/qtl2cran")
z<-c(0,0,0)
z<-c(0,0,0,0)
print("Hello")
print("Bom dia")
source('~/stapleton_lab/Test2.R')
install.packages("qtl")
vqtl
install.packages("purrr")
install.packages("readr")
install.packages("dplyr")
print("Bom Dia meus amigos!")
library(qtl)
library(vqtl)
library(purrr)
library(readr)
library(dplyr)
library(qtl)
library(qtl)
library(qtl)
summary(hyper)
data("hyper")
summary(hyper)
nind(hyper)
nphe(hyper)
nchr(hyper)
totmar(hyper)
nmar(hyper)
plot(hyper)
data
library(qtl)
library(vqtl)
library(purrr)
library(readr)
library(dplyr)
install.packages("readr")
library(qtl)
library(vqtl)
library(purrr)
library(readr)
library(dplyr)
dat <- read.cross(file = "./Manching_Practice_Data.csv")
summary(dat)
#vQTL with simulated data
library(qtl)
library(vqtl)
library(purrr)
library(readr)
library(dplyr)
# setwd("/Users/mbyrd/StapletonLab/Stapleton_Lab/vQTL_Practice")
# Michael Stampede Path
# setwd ("/work/04908/mcb4548/stampede2/GitHub/Stapleton_Lab/vQTL_Practice")
dat <- read.cross(file = "./Manching_Practice_Data.csv")
# Not sure what this does. Was told by Thomas its needed.
dat <- drop.nullmarkers(dat)
#scan with variance
dat <- calc.genoprob(dat)
###
#vQTL with simulated data
library(qtl)
library(vqtl)
library(purrr)
library(readr)
library(dplyr)
# setwd("/Users/mbyrd/StapletonLab/Stapleton_Lab/vQTL_Practice")
# Michael Stampede Path
# setwd ("/work/04908/mcb4548/stampede2/GitHub/Stapleton_Lab/vQTL_Practice")
dat <- read.cross(file = "./Manching_Practice_Data.csv")
# Not sure what this does. Was told by Thomas its needed.
dat <- drop.nullmarkers(dat)
#scan with variance
dat <- calc.genoprob(dat)
###
### Combining Genomes and Mo###
library(stringr)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
setwd("/Users/andrewnorris/stapleton_lab/JCastillo/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-(4:5)]
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
#Create zero matrix to which data will input
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
#From
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
View(dat2)
#From "Genotype" values,
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
View(dat2)
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
colnames(dat2) = colnames()
library(beepr)
beep()
dim(dat3);dim(snp)
#####Adding back in the Trait info#####
dat3 = cbind(dat2$Height,dat2[,1:3],dat3)
### Combining Genomes and Mo###
library(stringr)
setwd("/Users/andrewnorris/stapleton_lab/Stress_Splicing")
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-(4:5)]
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
#Create zero matrix to which data will input
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
#From "Genotype" values, match Plant Height data and Marker data by detecting last three digits of Mo###'s
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
View(dat2)
#####Adding marker location and chromosome#####
aux = matrix(snp$incre_new, nrow= 1)
#####Adding back in the Trait info#####
dat3 = cbind(dat2$Height,dat2[,1:3],dat3)
relevant = data.frame(matrix(rep(0,length(dat$sampleID)*dim(exp_data)[1]), ncol = dim(exp_data)[1]))
## If zero matrix is the way to go... #Create zero matrix to which data will input
relevant = data.frame(matrix(rep(0,length(data$sampleID)*dim(exp_data)[1]), ncol = dim(exp_data)[1]))
## If zero matrix is the way to go... #Create zero matrix to which data will input
relevant = data.frame(matrix(rep(0,length(data$sampleID)*dim(exp_data)[1]), ncol = dim(exp_data)[1]))
# Mac Directory
setwd("/Users/andrewnorris/Stapleton_Lab/Stress_Splicing/2018_6")
# Mac Directory
setwd("/Users/andrewnorris/Stapleton_Lab/Stress_Splicing/2018_6")
# Mac Directory
setwd("/Users/andrewnorris/Stapleton_Lab/Stress_Splicing/2018_6")
library(tidyr)
# Mac Directory
setwd("/Users/andrewnorris/Stapleton_Lab/Stress_Splicing/2018_6")
# Mac Directory
setwd("Users/andrewnorris/Stapleton_Lab/Stress_Splicing/2018_6")
# Read in Calibration Data
data <- read.csv(file = "2018_6_1_Calibrated_Data_Frame_with_Derivatives.csv")
# Mac Directory
setwd("/Users/andrewnorris/Stapleton_Lab/Stress_Splicing/2018_6")
############## QPCR PLATE & ADJUSTMENT MODEL #############
##########################################################
library(tidyr)
library(pracma)
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing/qPCR")
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/2018_11")
########################################################
# Remove extra labels row and column
deriv = deriv[-1,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=TRUE)
# Rename columns
colnames(deriv)=c("reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
# Remove extra labels row
deriv=deriv[-1,]
### Removing NTC and gblock-Minus values ###
# Indicate if sample is NTC (negative control)
deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# Remove NTC samples, indicator (T/F) column, and cpD2 values
ntc = which(deriv$sampleID_NTC)
deriv = deriv[-ntc,]
deriv = deriv[,-c(5,6)]
# Indicate if sample is 'Plus' or 'Minus'
deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
minus = which(deriv$sampleID_Minus)
deriv = deriv[-minus,]
deriv = deriv[,-c(5)]
# Remove extra labels row and column
deriv = deriv[-1,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=TRUE)
# Remove extra labels row and column
deriv = deriv[-1,-1]
In the case of having two separate CSV files of calculated derivatives,
use this code to combine, prior to the following transpositions:
deriv.1<-read.csv(file = "2018_11_1_plate_qPCR_output.csv", header=FALSE)
deriv.2<-read.csv(file = "2018_11_2_plate_qPCR_output.csv", header=FALSE)
deriv=cbind(deriv.1, deriv.2)
# Remove extra labels row and column
deriv = deriv[-1,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=TRUE)
# Rename columns
colnames(deriv)=c("reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
# Remove extra labels row
deriv=deriv[-1,]
### Removing NTC and gblock-Minus values ###
# Indicate if sample is NTC (negative control)
deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# Remove NTC samples, indicator (T/F) column, and cpD2 values
ntc = which(deriv$sampleID_NTC)
deriv = deriv[-ntc,]
deriv = deriv[,-c(5,6)]
# Indicate if sample is 'Plus' or 'Minus'
deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
minus = which(deriv$sampleID_Minus)
deriv = deriv[-minus,]
deriv = deriv[,-c(5)]
# Create/Write data frame for Calibrated values
calib_df = deriv %>% filter(str_detect(sampleID, "g"))
# Sort by starting quantity
calib_df = calib_df[order(calib_df$starting_quantity),]
calib_df$starting_quantity = as.numeric(as.character(calib_df$starting_quantity))
calib_df$cpD1 = as.numeric(as.character(calib_df$cpD1))
calib_data = calib_df
# Create empty vectors for for-loop to input cpD1 values
test1 = c()
allP = c()
startq = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(calib_df$starting_quantity)){
sq <- calib_df$starting_quantity[i]
if(i %% 6 == 1){
startq = c(startq,sq,sq,sq)
}
val <- toString(calib_df$reaction_type[i])
if(strcmp(val, "test1")){
test1 = c(test1, calib_df$cpD1[i])
}
if(strcmp(val, "all_products")){
allP = c(allP, calib_df$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by starting quantity
calib_data = as.data.frame(cbind(startq, test1, allP))
# Format starting quantity values as decimals, not scientific notation
calib_data$startq=as.factor(format(calib_data$startq, scientific=FALSE))
calib_data$startq=as.factor(calib_data$startq)
ratio = calib_data$allP/calib_data$test1
# Append ratios to data set
calib_data = cbind(calib_data, ratio)
m = as.matrix.data.frame(name,b,c)
name = c(a,a,b,b,c,c)
a = c(1,2,3,4,5,6)
b = c(7,8,9,10,11)
m = as.matrix.data.frame(name,b,c)
### developing code for combination ratios for qPCR ###
name = c('a','a','b','b','c','c')
a = c(1,2,3,4,5,6)
b = c(7,8,9,10,11)
m = as.matrix.data.frame(name,b,c)
m = as.matrix.data.frame(name,b,c)
b = c(7,8,9,10,11,12)
m = as.matrix.data.frame(name,b,c)
m = as.data.frame(name,b,c)
m = as.data.frame(cbind(name,b,c))
m
m = as.matrix.data.frame(name,a,b)
m = as.data.frame(cbind(name,a,b))
m
r = c()
for (i in a){
r = cbind(ratio,i/b)
}
r = cbind(ratio,a[i]/b)
r
r = c()
for (i in a){
r = cbind(r,a[i]/b)
}
r
### developing code for combination ratios for qPCR ###
name = c('a','a','b','b','c','c')
a = c(1,2,3,4,5,6)
b = c(7,8,9,10,11,12)
m = as.data.frame(cbind(name,a,b))
r = c()
n = 'a'
if (name == n){
for (i in a){
r = cbind(r,a[i]/b)
}
else n == name
}
?mutate
library(tidyverse)
m %>%
group_by(name) %>%
mutate(value.mean = mean(value))
m %>%
group_by(name) %>%
mutate(a.mean = mean(a))
class m$a
class(m$a)
m = as.data.frame(cbind(name,as.numeric(a),b))
class(m$a)
m = as.data.frame(cbind(name,as.numeric(as.character(a),b))
)
m = as.data.frame(cbind(name,as.numeric(as.character(a)),b))
class(m$a)
m = cbind(name,a,b)
class(m$a)
m = as.matrix(cbind(name,a,b))
m$a
m = as.data.frame(cbind(name,a,b)
)
typeof(m$a)
class(m$a)
library(tidyverse)
m %>%
group_by(name) %>%
mutate(a.mean = mean(a))
m = as.data.frame(name,a,b)
m = as.data.frame(cbind(name,a,b))
m = as.data.frame(cbind(name,as.numeric(as.character(a)),b))
a = as.numeric(as.character(c(1,2,3,4,5,6)))
m = as.data.frame(cbind(name,a,b))
class(m$a)
m = data.frame(cbind(name,a,b))
class(m$a)
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE)
class(m$a)
m = data.frame(cbind(name,as.numeric(a),b), stringsAsFactors = FALSE)
class(m$V2)
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE, integersAsFactors = FALSE)
class(m$a)
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE, numericsAsFactors = FALSE)
class(m$a)
m = data.frame(cbind(name,as.numeric(a),as.numeric(b)), stringsAsFactors = FALSE)
class(m$a)
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE)
format.df(m,c(a,b))
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE)
library(tidyverse)
library(tidyverse)
m %>%
group_by(name) %>%
mutate(a.mean = mean(a))
m$a = as.numeric(m$a)
m$b = as.numeric(m$b)
library(tidyverse)
m %>%
group_by(name) %>%
mutate(a.mean = mean(a))
m %>%
group_by(name) %>%
a/b
divide <- function(a, b){
r = c()
for (i in a){
r = cbind(r,a[i]/b)
}
return(r)
}
m %>%
group_by(name) %>%
divide(a,b)
divide <- function(a, b){
r = c()
for (i in a){
r = cbind(r,a[i]/b)
}
return(r)
}
divide(a,b)
m %>%
group_by(name) %>%
divide(a,b)
divide <- function(col1, col2){
r = c()
for (i in col1){
r = cbind(r,col1[i]/col2)
}
return(r)
}
m %>%
group_by(name) %>%
divide(a,b)
m %>%
group_by(name) %>%
divide(m$a,m$b)
m %>%
group_by(name) %>%
divide(m$a)
m %>%
group_by(name) %>%
divide(m$a)
m %>%
group_by(name) %>%
divide(m$a, m$b)
divide(a,b)
divide(m$a, m$b)
m %>%
group_by(name) %>%
print(cbind(a,b))
### developing code for combination ratios for qPCR ###
name = c('x','x','y','y','z','z')
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE)
m %>%
group_by(name) %>%
print(cbind(a,b))
m$a = as.numeric(m$a)
m$b = as.numeric(m$b)
m %>%
group_by(name) %>%
print(cbind(a,b))
library(dplyr)
m %>%
)
m %>%
summarise(result = divide(a,b))
m %>%
group_by(name) %>%
summarise(result = divide(a,b))
m %>%
group_by(name) %>%
#print(cbind(a,b))
divide(m$a, m$b)
times <- function(col1, col2){
col1*col2
}
m %>%
group_by(name) %>%
#print(cbind(a,b))
times(a,b)
split(m, name)
for (i in m){
divide(a,b)
}
for (i in group){
divide(a,b)
}
group = split(m, name)
for (i in group){
divide(a,b)
}
want = for (i in group){
divide(a,b)
}
want
want = for (k in group){
divide(a,b)
}
want
group
group$x
for (k in group){
group = cbind(group,divide(a,b))
}
group
View(group)
for (k in group){
print(group)
}
group = split(m, name)
for (k in group){
print(group)
}
group = split(m, name)
for (k in group){
divide(m$a, m$b)
}
want = for (k in group){
divide(m$a, m$b)
}
want
want = for (k in group){
divide(k$a, k$b)
}
print(want)
names(group)
group[1]
divide(group$x$a)
divide(group$x$a, gorup$x$b)
divide(group$x$a, group$x$b)
for (k in group){
print(divide(k$a, k$b))
}
divide(group$y$a, group$yt$b)
divide(group$y$a, group$y$b)
group$y$a
group$y
divide(group$y$a, group$y$b
)
for (k in group){
print(divide(k$a, k$b))
}
class(group)
for (k in group){
#print(divide(k$a, k$b))
print(k)
}
class(group$y$a)
divide(group$y$a, group$y$b)
