if(strcmp(val, "all_products")){
allP.exp = c(allP.exp, exp_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by sample ID, convert to data frame
exp_data = as.data.frame(cbind(sampleID.exp, test1.exp, allP.exp))
exp_data$test1.exp = as.numeric(as.character(exp_data$test1.exp))
exp_data$allP.exp = as.numeric(as.character(exp_data$allP.exp))
# Calculate ratios for experimental data
ratio.exp = exp_data$allP.exp/exp_data$test1.exp
# Append ratios to data set
exp_data = cbind(exp_data, ratio.exp)
### COMPLETED EXPERIMENTAL DATA FRAME ###
##########################################################
############### Combination Ratios for qPCR ##############
##########################################################
## NOT FOR USE IN CAPSTONE -- USE IN COMPARISON LATER ##
startquan = as.character(calib_data$startq)
allprod = calib_data$allP
t1 = calib_data$test1
dat = data.frame(cbind(startquan,allprod,t1), stringsAsFactors = FALSE)
dat$allprod = as.numeric(dat$allprod)
dat$t1 = as.numeric(dat$t1)
#Create divide funtion - every element in column 1 divided by every element in column 2
divide <- function(col1, col2){
ratio = NULL;
for (i in col1){
ratio = c(ratio,i/col2)
}
return(ratio)
}
#Subset data by starting quantity
group = split.data.frame(dat, dat$startquan)
# Calculate combination ratios at each starting quantity
combratio = NULL;
for (k in group){
combratio = cbind(combratio, divide(k$allprod, k$t1))
}
# Create data frame with unique ratios at each starting quantity
startqvalues = rep(unique(startquan), rep(length(unique(startquan)),length(unique(startquan))))
newratios.calib = data.frame(rbind(unique(startqvalues), combratio), stringsAsFactors = FALSE)
# Duplicate newratios.calib data frame
newratios.calib = as.data.frame(newratios.calib)
colnames(newratios.calib) = c("0.01", "0.05", "0.10", "0.50", "1.00", "50.00")
newratios.calib = newratios.calib[-1,]
newratiosvector = as.numeric(as.vector(as.matrix.data.frame(newratios.calib)))
startqvector = sort(rep(unique(startquan), length(newratios.calib$`0.01`)))
newratios.calib = as.data.frame(cbind(newratiosvector, startqvector), stringsAsFactors = FALSE)
#################### end combination ratios #####################
##########################################################
########## PROBABILITY MODEL - Calibrated Data ###########
##########################################################
##### Finding the average adjusted test 1 #########
#(this section should be able to be calculated independent of new ratio values)
# Create empty vectors for for-loop input
calib_data$test1 = as.numeric(as.character(calib_data$test1))
calib_data$allP = as.numeric(as.character(calib_data$allP))
adj_val = c()
allP = c()
startq = c()
ratio =calib_data$allP/calib_data$test1
# Itterating through each set of (3) observations performing U-Stats on each set of inputs
for (i in 1:(nrow(calib_data)/3)){
t_x <- c(calib_data$allP[3*i - 2], calib_data$allP[3*i - 1], calib_data$allP[3*i])
t_y <- c(calib_data$test1[3*i - 2], calib_data$test1[3*i - 1], calib_data$test1[3*i])
adj <- mean(outer(t_x, t_y, "-"))
adj_val <- c(adj_val, adj, adj, adj)
}
adjusted_test1 <- test1 + adj_val
# Append adjusted test1 values and adjustment value to data set
calib_data=cbind(calib_data,adjusted_test1,adj_val)
# Write Calibrated Data CSV --> Used in "qPCR_Plotting" code for visuals
#write.csv(file="YEAR_MONTH_Calibrated_DF", calib_data)
# Adjustment: allP - test1 -- Using in model to multiply probability matrix by
calib_data$diff = calib_data$allP - calib_data$adjusted_test1
## CREATE DATA FRAME WITH ONLY S.Q. AND ADJUSTMENT VAL ##
calib_adj = calib_data[,c(1,6)]
average <- function(col1){
avg = NULL;
for (i in col1){
avg = c(avg,mean(col1))
}
return(avg)
}
##Subset data by starting quantity
group = split.data.frame(calib_adj, calib_adj$startq)
adj.test1.avg = NULL;
for (k in group){
adj.test1.avg = c(adj.test1.avg, average(k$adjusted_test1))
}
print(adj.test1.avg)
calib_adj = as.data.frame(unique(cbind(as.character(calib_data$startq), adj.test1.avg)))
calib_adj$adj.test1.avg = as.numeric(as.character(calib_adj$adj.test1.avg))
# Rename columns
colnames(calib_adj)=c("startq", "adj.test1.avg")
#############################################
##### Creating the components of the ORLM ######
# Calculate z-score for calibrated data
zscore = (newratiosvector - mean(newratiosvector))/sd(newratiosvector)
newratios.calib$zscore = zscore
# Predict calibrated data ratios using experimental data
pred.ratio = zscore*sd(ratio.exp)+mean(ratio.exp) #why do we need this???
newratios.calib$pred.ratio = pred.ratio
# Append y (predicted calibrated ratios) to calibrated data frame -- CALIBRATED RATIOS IN TERMS OF EXPERIMENTAL PARAMETERS
#no way of knowing if the pred.ratio and the correct starting quantities are lining up correctly #
#calib_data = cbind(calib_data,newratiosvector, pred.ratio)
# Ordinal Logistic Regression Model - starting quantity as response to calibrated z-score
model = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$pred.ratio, Hess = TRUE)
# should the model be based off of the relation between startq and pred.ratio or zscore?
model = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$zscore, Hess = TRUE)
summary(model)
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
#############################################
# Calculate experimental data z-score
zscore = (exp_data$ratio.exp - mean(exp_data$ratio.exp))/sd(exp_data$ratio.exp)
prob.matrix = predict(model, zscore, type='p')
# Apply probability matrix to the adjusted test 1 averages
apply(prob.matrix, 1, function(x) x*calib_adj$adj.test1.avg)
exp_data$exp.adjust = colSums(apply(prob.matrix, 1, function(x) x*calib_adj$adj.test1.avg))
# Create new column with stress product (VQTL input)
exp_data$stress = exp_data$allP.exp - exp_data$exp.adjust
n = length(calib_data[,1])
set.seed(1)
f <- 6
folds <- rep_len(1:f, length.out = dim(calib_data)[1])
folds <- sample(folds, size = dim(calib_data)[1], replace = F)
table(folds)
start.time <- Sys.time()
OUT.GLM=NULL
TRUTH = NULL; OUTPUT=NULL;
k=1
test.ID <- which(folds == k)
train_set <- newratios.calib[-test.ID, ]
test_set <- newratios.calib[test.ID, ]
model.fit = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$zscore, Hess = TRUE)
olrm.pred = predict(model.fit, test_set[,-startqvector], type = "response")
View(test_set)
olrm.pred = predict(model.fit, test_set$zscore, type = "response")
test.ID <- which(folds == k)
train_set <- newratios.calib[-test.ID, ]
test_set <- newratios.calib[test.ID, ]
model.fit = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$zscore, Hess = TRUE)
olrm.pred = predict(model.fit, test_set$zscore, type = "response")
olrm.pred = predict(model.fit, test_set$zscore, "probs")
View(olrm.pred)
olrm.pred = predict(model.fit, test_set$zscore, "class")
View(olrm.pred)
as.data.frame(olrm.pred)
olrm.pred = predict(model.fit, test_set$zscore, "probs")
as.data.frame(olrm.pred)
View(olrm.pred)
olrm.pred$sum = sum(olrm.pred$[,1:54])
olrm.pred$sum = sum(olrm.pred[,1:54])
rowSums(olrm.pred)
View(newratios.calib)
dim(newratios.calib)
table(folds)
View(exp_data)
View(olrm.pred)
colnames(olrm.pred)[max.col(olrm.pred, ties.method="first")]
olrm.pred$max = colnames(olrm.pred)[max.col(olrm.pred, ties.method="first")]
View(olrm.pred)
olrm.pred$max = as.data.frame(colnames(olrm.pred)[max.col(olrm.pred, ties.method="first")])
View(olrm.pred)
max = colnames(olrm.pred)[max.col(olrm.pred, ties.method="first")]
colnames(olrm.pred)[max.col(olrm.pred, ties.method="first")]
##########################################################
############## QPCR PLATE & ADJUSTMENT MODEL #############
##########################################################
library(tidyr)
library(pracma)
library(stringr)
library(tidyverse)
library(dplyr)
library(MASS)
library(glm.predict)
library(Stack)
# Mac Directory
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_6")
#setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_(MONTH)")
# PC Directory
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing/qPCR")
### READ IN DERIVATIVE DATA ###
# In the case of having two separate CSV files of calculated derivatives,
# use this code to combine, prior to the following transpositions:
#deriv.1<-read.csv(file = "2018_11_1_plate_qPCR_output.csv", header=FALSE)
#deriv.2<-read.csv(file = "2018_11_2_plate_qPCR_output.csv", header=FALSE)
#deriv=cbind(deriv.1, deriv.2)
# In the case of having one CSV containing calculated derivatives, use this code:
#deriv=read.csv(file = "(YEAR_MONTH_PLATE_qPCR_output.csv", header=FALSE)
deriv_complete=read.csv(file = "2018_6_1_qPCR_Output.csv", header=FALSE)
##########################################################
################### Initial Data Framing #################
##########################################################
deriv = deriv_complete
# Remove extra labels column
deriv = deriv[,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=FALSE)
# Remove blank column (4th)
#deriv = deriv[,-5]
# Rename columns
colnames(deriv)=c("plateID", "reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
### Removing NTC and gblock-Minus values ###
# Indicate if sample is NTC (negative control)
deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# Remove NTC samples, indicator (T/F) column, and cpD2 values
ntc = which(deriv$sampleID_NTC)
deriv = deriv[-ntc,]
deriv = deriv[,-c(6,7)]
# Indicate if sample is 'Plus' or 'Minus'
deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
minus = which(deriv$sampleID_Minus)
deriv = deriv[-minus,]
deriv = deriv[,-6]
deriv$cpD1 = as.numeric(as.character(deriv$cpD1))
### COMPLETED INITIAL DATA FRAMING ###
##########################################################
############ Removing Ununsual Observations ##############
##########################################################
# Remove unusual observations from initial data frame (CT value less than 10)
deriv = deriv %>% filter(deriv$cpD1 >= 10)
# Read in raw cycle data - may need to combine multiple files
cycle1 = read.csv(file = "2018_6_1_plate.csv", header = FALSE)
# Create complete set of reaction data (derivative and cycle)
reaction = Stack(deriv_complete, cycle1)
# Remove repeat labeling
replace = reaction[7:10,]
reaction = reaction[-c(1:4, 7:10),]
reaction = Stack(replace, reaction)
# Transpose so column headers at top
reaction = as.data.frame(t(reaction))
reaction = reaction[,-c(6:7)]
# Replace column names with first row
colnames(reaction) <- as.character(unlist(reaction[1,]))
reaction = reaction[-1,]
colnames(reaction)[5] = "cpD1"
reaction$cpD1 = as.numeric(as.character(reaction$cpD1))
# Filter unusual observations (CT value less than 10)
unusual_obs_2018_6 = reaction %>% filter(reaction$cpD1 < 10)
# Write CSV file
#write.csv(unusual_obs_2018_6, file="Unusual_Obs_2018_6.csv")
# ### COMPLETED UNUSUAL OBSERVATIONS REMOVAL/REPORTING ###
##########################################################
################# Calibrated Data Framing ################
##########################################################
# Create/Write data frame for Calibrated values
calib_data = deriv %>% filter(str_detect(sampleID, "g"))
# Sort by starting quantity
calib_data = calib_data[order(calib_data$starting_quantity),]
calib_data$starting_quantity = as.numeric(as.character(calib_data$starting_quantity))
calib_data$cpD1 = as.numeric(as.character(calib_data$cpD1))
# Create empty vectors for for-loop to input cpD1 values
test1 = c()
allP = c()
startq = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(calib_data$starting_quantity)){
sq <- calib_data$starting_quantity[i]
if(i %% 6 == 1){
startq = c(startq,sq,sq,sq)
}
val <- toString(calib_data$reaction_type[i])
if(strcmp(val, "test1")){
test1 = c(test1, calib_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP = c(allP, calib_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by starting quantity
calib_data = as.data.frame(cbind(startq, test1, allP))
# Format starting quantity values as decimals, not scientific notation
calib_data$startq=as.factor(format(calib_data$startq, scientific=FALSE))
calib_data$startq=as.factor(calib_data$startq)
# Calculate ratio of allP/test1
ratio = calib_data$allP/calib_data$test1
# Append ratios to data set
calib_data = cbind(calib_data, ratio)
### COMPLETED CALIBRATED DATA FRAME ###
##########################################################
############### Experimental Data Framing ################
##########################################################
# Create/Write data frame for Experimental values
exp_data = deriv %>% filter(str_detect(sampleID, "g")==FALSE)
# Sort by starting quantity
exp_data = exp_data[order(exp_data$starting_quantity),]
# Remove first and last rows (unnecessary labeling)
# exp_data = exp_data[-1,]
# exp_data = exp_data[-nrow(exp_data),]
exp_data$cpD1 = as.numeric(as.character(exp_data$cpD1))
# Order data by sampleID
exp_data = exp_data[order(exp_data$sampleID),]
### Finding invalid observations ###
# Find counts of each unique sampleID; for sample with a count not equal to 2, remove from data frame
counts = as.data.frame(table(exp_data$sampleID))
countsne2 = as.data.frame(filter(counts, !counts$Freq==2))
# Remove invalid observations from data set
exp_data = exp_data[!exp_data$sampleID %in% countsne2$Var1,]
### Report invalid observations ###
# Send CSV of removed sampleID's to Dr. S (invalid obs), with additional plots of raw cycle values for invalid obs
# Write CSV file to send Dr. S for investigation
### WORK ON --> add derivative values in to the CSV file
### WORK ON --> creating a separate CSV file with samples with unusual derivatives
#write.csv(file="2018_11_SamplesToInvestigate", countsne2)
#write.csv(file="YEAR_MONTH_SamplesToInvestigate", countsne2)
# Create empty vectors for for-loop to input cpD1 values
test1.exp = c()
allP.exp = c()
sampleID.exp = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(exp_data$sampleID)){
id.exp = toString(exp_data$sampleID[i])
if(i %% 2 == 1){
sampleID.exp = c(sampleID.exp, id.exp)
}
val = toString(exp_data$reaction_type[i])
if(strcmp(val, "test1")){
test1.exp = c(test1.exp, exp_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP.exp = c(allP.exp, exp_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by sample ID, convert to data frame
exp_data = as.data.frame(cbind(sampleID.exp, test1.exp, allP.exp))
exp_data$test1.exp = as.numeric(as.character(exp_data$test1.exp))
exp_data$allP.exp = as.numeric(as.character(exp_data$allP.exp))
# Calculate ratios for experimental data
ratio.exp = exp_data$allP.exp/exp_data$test1.exp
# Append ratios to data set
exp_data = cbind(exp_data, ratio.exp)
### COMPLETED EXPERIMENTAL DATA FRAME ###
##########################################################
############### Combination Ratios for qPCR ##############
##########################################################
## NOT FOR USE IN CAPSTONE -- USE IN COMPARISON LATER ##
startquan = as.character(calib_data$startq)
allprod = calib_data$allP
t1 = calib_data$test1
dat = data.frame(cbind(startquan,allprod,t1), stringsAsFactors = FALSE)
dat$allprod = as.numeric(dat$allprod)
dat$t1 = as.numeric(dat$t1)
#Create divide funtion - every element in column 1 divided by every element in column 2
divide <- function(col1, col2){
ratio = NULL;
for (i in col1){
ratio = c(ratio,i/col2)
}
return(ratio)
}
#Subset data by starting quantity
group = split.data.frame(dat, dat$startquan)
# Calculate combination ratios at each starting quantity
combratio = NULL;
for (k in group){
combratio = cbind(combratio, divide(k$allprod, k$t1))
}
# Create data frame with unique ratios at each starting quantity
startqvalues = rep(unique(startquan), rep(length(unique(startquan)),length(unique(startquan))))
newratios.calib = data.frame(rbind(unique(startqvalues), combratio), stringsAsFactors = FALSE)
# Duplicate newratios.calib data frame
newratios.calib = as.data.frame(newratios.calib)
colnames(newratios.calib) = c("0.01", "0.05", "0.10", "0.50", "1.00", "50.00")
newratios.calib = newratios.calib[-1,]
newratiosvector = as.numeric(as.vector(as.matrix.data.frame(newratios.calib)))
startqvector = sort(rep(unique(startquan), length(newratios.calib$`0.01`)))
newratios.calib = as.data.frame(cbind(newratiosvector, startqvector), stringsAsFactors = FALSE)
#################### end combination ratios #####################
##########################################################
########## PROBABILITY MODEL - Calibrated Data ###########
##########################################################
##### Finding the average adjusted test 1 #########
#(this section should be able to be calculated independent of new ratio values)
# Create empty vectors for for-loop input
calib_data$test1 = as.numeric(as.character(calib_data$test1))
calib_data$allP = as.numeric(as.character(calib_data$allP))
adj_val = c()
allP = c()
startq = c()
ratio =calib_data$allP/calib_data$test1
# Itterating through each set of (3) observations performing U-Stats on each set of inputs
for (i in 1:(nrow(calib_data)/3)){
t_x <- c(calib_data$allP[3*i - 2], calib_data$allP[3*i - 1], calib_data$allP[3*i])
t_y <- c(calib_data$test1[3*i - 2], calib_data$test1[3*i - 1], calib_data$test1[3*i])
adj <- mean(outer(t_x, t_y, "-"))
adj_val <- c(adj_val, adj, adj, adj)
}
adjusted_test1 <- test1 + adj_val
# Append adjusted test1 values and adjustment value to data set
calib_data=cbind(calib_data,adjusted_test1,adj_val)
# Write Calibrated Data CSV --> Used in "qPCR_Plotting" code for visuals
#write.csv(file="YEAR_MONTH_Calibrated_DF", calib_data)
# Adjustment: allP - test1 -- Using in model to multiply probability matrix by
calib_data$diff = calib_data$allP - calib_data$adjusted_test1
## CREATE DATA FRAME WITH ONLY S.Q. AND ADJUSTMENT VAL ##
calib_adj = calib_data[,c(1,6)]
average <- function(col1){
avg = NULL;
for (i in col1){
avg = c(avg,mean(col1))
}
return(avg)
}
##Subset data by starting quantity
group = split.data.frame(calib_adj, calib_adj$startq)
adj.test1.avg = NULL;
for (k in group){
adj.test1.avg = c(adj.test1.avg, average(k$adjusted_test1))
}
print(adj.test1.avg)
calib_adj = as.data.frame(unique(cbind(as.character(calib_data$startq), adj.test1.avg)))
calib_adj$adj.test1.avg = as.numeric(as.character(calib_adj$adj.test1.avg))
# Rename columns
colnames(calib_adj)=c("startq", "adj.test1.avg")
#############################################
##### Creating the components of the ORLM ######
# Calculate z-score for calibrated data
zscore = (newratiosvector - mean(newratiosvector))/sd(newratiosvector)
newratios.calib$zscore = zscore
# Predict calibrated data ratios using experimental data
pred.ratio = zscore*sd(ratio.exp)+mean(ratio.exp) #why do we need this???
newratios.calib$pred.ratio = pred.ratio
# Append y (predicted calibrated ratios) to calibrated data frame -- CALIBRATED RATIOS IN TERMS OF EXPERIMENTAL PARAMETERS
#no way of knowing if the pred.ratio and the correct starting quantities are lining up correctly #
#calib_data = cbind(calib_data,newratiosvector, pred.ratio)
# Ordinal Logistic Regression Model - starting quantity as response to calibrated z-score
model = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$pred.ratio, Hess = TRUE)
# should the model be based off of the relation between startq and pred.ratio or zscore?
model = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$zscore, Hess = TRUE)
summary(model)
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
#############################################
# Calculate experimental data z-score
zscore = (exp_data$ratio.exp - mean(exp_data$ratio.exp))/sd(exp_data$ratio.exp)
prob.matrix = predict(model, zscore, type='p')
# Apply probability matrix to the adjusted test 1 averages
apply(prob.matrix, 1, function(x) x*calib_adj$adj.test1.avg)
exp_data$exp.adjust = colSums(apply(prob.matrix, 1, function(x) x*calib_adj$adj.test1.avg))
# Create new column with stress product (VQTL input)
exp_data$stress = exp_data$allP.exp - exp_data$exp.adjust
colnames(olrm.pred)[max.col(olrm.pred, ties.method="first")]
n = length(calib_data[,1])
set.seed(1)
f <- 6
folds <- rep_len(1:f, length.out = dim(calib_data)[1])
folds <- sample(folds, size = dim(calib_data)[1], replace = F)
table(folds)
start.time <- Sys.time()
OUT.GLM=NULL
TRUTH = NULL; OUTPUT=NULL;
colnames(olrm.pred)[max.col(olrm.pred, ties.method="first")]
test.ID <- which(folds == k)
train_set <- newratios.calib[-test.ID, ]
test_set <- newratios.calib[test.ID, ]
model.fit = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$zscore, Hess = TRUE)
olrm.pred = predict(model.fit, test_set$zscore, "probs")
colnames(olrm.pred)[max.col(olrm.pred, ties.method="first")]
max = colnames(olrm.pred)[max.col(olrm.pred, ties.method="first")]
olrm.pred = as.data.frame(olrm.pred)
olrm.pred = cbind(olrm.pred, max)
View(olrm.pred)
table(max, test_set$startqvector)
length(test_set)
length(test_set$startqvector)
dim(test_set)
View(test_set)
dim(train_set)
k=1
dim(train_set)
for (k in 1:f)
test.ID <- which(folds == k)
train_set <- newratios.calib[-test.ID, ]
test_set <- newratios.calib[test.ID, ]
model.fit = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$zscore, Hess = TRUE)
olrm.pred = predict(model.fit, test_set$zscore, "probs")
n = length(calib_data[,1])
set.seed(1)
f <- 6
folds <- rep_len(1:f, length.out = dim(calib_data)[1])
folds <- sample(folds, size = dim(calib_data)[1], replace = F)
table(folds)
start.time <- Sys.time()
OUT.GLM=NULL
TRUTH = NULL; OUTPUT=NULL;
k=1
test.ID <- which(folds == k)
train_set <- newratios.calib[-test.ID, ]
test_set <- newratios.calib[test.ID, ]
model.fit = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$zscore, Hess = TRUE)
olrm.pred = predict(model.fit, test_set$zscore, "probs")
dim(train_set)
table(max, test_set$startqvector)
length(max)
View(train_set)
dim(test_set$startqvector)
length(test_set$startqvector)
View(test_set)
dim(test_set)
View(test_set)
dim(train_set)
