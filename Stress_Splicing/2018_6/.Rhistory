x = c(2,6,16,24,28,29,69,40,33,100,99,69,45,4,8,69,69,15,12,1,21,5,4,8,115,04,5,2)
hist(x)
student =c("Jessica", "Julia", "Drew", "Michael")
grades =c(75,80,85,90,95,100)
sNum =c("1", "2", "3", "4")
SGNumb =c("1", "4", "2", "3", "4")
studentInfo = cbind(student, sNum)
colnames(studentInfo) =c("StudentName", "StudentNumber")
studentGrade = cbind(SGNumb, grades)
colnames(studentGrade) =c("StudentNumber", "Grade")
grades =c(75,80,85,90,95)
studentGrade = cbind(SGNumb, grades)
colnames(studentGrade) =c("StudentNumber", "Grade")
merge(studentInfo, studentGrade, by = "StudentNumber")
7-((7^2-48)/14)
sqrt(48)
?filter()
a = [1,2,3,4]
b = [5,6,7,8]
a = c(1,2,3,4)
b = c(5,6,7,8)
a[1]/b
a/b
apply(a, 1, a/b)
?apply()
apply(a, 1, /b)
div = apply(a[1], 1, /b)
div = apply(a, 1, /b)
div = apply(a, 1, /3)
div = apply(a, 1, "/"3)
div = apply(a, 1, "/",3)
div = apply(a, 1, function(row_val)/b)
div = apply(a, 1, function(row_val) row_val/b)
m = cbind(a,b)
class(m)
div = apply(a, 1, function(row_val) row_val/b)
?function()
)
div = apply(a, 1, row_val/b)
div = apply(a, 1, "divide" b)
sweep(m, 1, mat[1,], "/")
sweep(m, 1, m[1,], "/")
apply(m, 1, a"/"b)
apply(m, 1, a "/" b)
divide(a, b)
for (i in len(a)){
i/b
}
for (i in length(a)){
i/b
}
a
x = for (i in length(a)){
i/b
}
x
b
for (i in a){
i/b
}
a
b
m
div = rbind(div,i/b)
div = c()
for (i in a){
div = rbind(div,i/b)
}
div
x = c("a", "a", "b", "b")
m = cbind(x,a,b)
names(m)
m
div = c()
for (sq in x){
for (i in a){
div = rbind(div,i/b)
}
}
div
258*1.12
/3
288.96/
3
359.48*1.1
359.48*1.1/3
359.48/3
(359.48*1.1)/3
395.43/3
(395.43/3)-96.32
### developing code for combination ratios for qPCR ###
name = c('x','x','y','y','z','z')
a = c(1,2,3,4,5,6)
b = c(7,8,9,10,11,12)
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE)
divide <- function(col1, col2){
r = c()
for (i in col1){
r = cbind(r,col1[i]/col2)
}
return(r)
}
m$a = as.numeric(m$a)
m$b = as.numeric(m$b)
group = split(m, name)
for (k in group){
#print(divide(k$a, k$b))
print(k)
}
for (k in group){
print(divide(k$a, k$b))
#print(k)
}
group
group$y
what = group$y
divide(what$a, what$b)
class(what$a)
divide(what$a[1], what$b[1])
what$a[1]
class(what$a[1])
what$a[1]/2
what$a[1]/what$b[1]
divide(what$a, what$b)
divide(group$x$a, group$x$b)
group$x$a[1]/group$x$b[1]
name = c('x','x','y','y','z','z')
a = c(1,2,3,4,5,6)
b = c(7,8,9,10,11,12)
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE)
# this function divides every i
# split the matrix by each group
group = split(m, name)
#for each group in k, divide column a by column b
for (k in group){
print(divide(k$a, k$b))
#print(k)
}
# change the components of the matrix to numeric
m$a = as.numeric(m$a)
m$b = as.numeric(m$b)
# split the matrix by each group
group = split(m, name)
print(group)
#for each group in k, divide column a by column b
for (k in group){
print(divide(k$a, k$b))
#print(k)
}
group = group[-(name)]
group = group[-(group$name)]
group = group[-(group$name),]
print(group)
#print(divide(k$a, k$b))
print(k)
#for each group in k, divide column a by column b
for (k in group){
k = k[-(name),]
#print(divide(k$a, k$b))
print(k)
}
what
what[-name]
what[-1,]
#for each group in k, divide column a by column b
for (k in group){
k = k[.-(name)]
#print(divide(k$a, k$b))
print(k)
}
what[,-name]
what[,-1]
k = k[.-1]
k = k[,-1]
#for each group in k, divide column a by column b
for (k in group){
k = k[,-1]
#print(divide(k$a, k$b))
print(k)
}
#for each group in k, divide column a by column b
for (k in group){
k = k[,-1]
print(divide(k$a, k$b))
#print(k)
}
group$1
#for each group in k, divide column a by column b
for (k in group){
print(divide(group$k$a, group$k$b))
#print(k)
}
group$y$a
group$x$a
class(group$x$a)
class(group$y$a)
k = 1
print(divide(k$a, k$b))
#for each group in k, divide column a by column b
names = c('x', 'y', 'z')
for (k in names){
print(divide(group$k$a, group$k$b))
#print(k)
}
#for each group in k, divide column a by column b
names = c('x', 'y', 'z')
for (k in names){
print(divide(group$k$a, group$k$b))
#print(k)
}
#print(divide(group$k$a, group$k$b))
print(k)
for (k in names){
#print(divide(group$k$a, group$k$b))
print(k)
}
print(divide(group$k$a, group$k$b))
for (k in names){
#print(divide(group$k$a, group$k$b))
print(group$k)
}
group$names[1]
names[1]
group$(names[1])
#for each group in k, divide column a by column b
names = c(x, y, z)
#for each group in k, divide column a by column b
names = c('x', 'y', 'z')
for (k in names){
#print(divide(group$k$a, group$k$b))
print(group$k)
}
for (k in names){
#print(divide(group$k$a, group$k$b))
print(k)
}
group$'x'
group$"x"
for (k in names){
#print(divide(group$k$a, group$k$b))
print(group$k)
}
print(k)
group$k
group$print(k)
for (k in group){
print(divide(group$k$a, group$k$b))
print(group$k)
}
for (k in group){
#print(divide(group$k$a, group$k$b))
print(group$k)
}
for (k in group){
#print(divide(group$k$a, group$k$b))
print(k)
}
k
k$a
k$a/k$b
divide(k$a, k$b)
k$a
k$a[1]
k$a[1]/k$b
k$a[2]/k$b
for (k in group){
print(divide(k$a, k$b))
print(k)
}
divide(k$a, k$b)
k$a
class(k$a)
for (k in group){
print(divide(c(k$a), c(k$b)))
#print(k)
}
divide(m$a, m$b)
class(m$a)
for (k in group){
A = k$a
B = k$b
print(divide(A, B))
#print(k)
}
for (k in group){
A = c(k$a)
B = c(k$b)
print(divide(A, B))
#print(k)
}
library(tidyverse)
m %>%
group_by(name) %>%
summarise(a.mean = mean(a))
m %>%
group_by(name) %>%
divide(a/b)
m %>%
group_by(name) %>%
divide(a,b)
gapply(m, name = "x", divide(k$a,k$b))
library(apply)
install.packages("apply")
library(apply)
install.packages("gapply")
library(gapply)
name = c('x','x','y','y','z','z')
a = c(1,2,3,4,5,6)
b = c(7,8,9,10,11,12)
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE)
# this function divides every item in column 1 by every item in column 2
divide <- function(col1, col2){
r = c()
for (i in col1){
r = cbind(r,col1[i]/col2)
}
return(r)
}
# change the components of the matrix to numeric
m$a = as.numeric(m$a)
m$b = as.numeric(m$b)
# split the matrix by each group
group = split(m, name)
one = group$x
two = group$y
three = group$z
divide(one$a, one$b)
divide(two$a, two$b)
group = split(m, name)
print(group)
one = group$x
two = group$y
three = group$z
divide(two$a, two$b)
two
two = as.data.frame(group$y)
two
divide(two$a, two$b)
A = group$y$a
B = group$y$b
divide(A, B)
### developing code for combination ratios for qPCR ###
name = c('x','x','y','y','z','z')
a = c(1,2,3,4,5,6)
b = c(7,8,9,10,11,12)
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE)
# this fu
m
# this function divides every item in column 1 by every item in column 2
divide <- function(col1, col2){
r = c()
for (i in col1){
r = cbind(r,col1[i]/col2)
}
return(r)
}
divide(m$a, m$b)
# change the components of the matrix to numeric
m$a = as.numeric(m$a)
m$b = as.numeric(m$b)
divide(m$a, m$b)
# split the matrix by each group
group = split(m, name)
print(group)
for (k in group){
print(divide(k$a, k$b))
#print(k)
}
for (k in group){
print(divide(k$b, k$a))
#print(k)
}
print(divide(k$a, k$b))
for (k in group){
print(divide(k$a, k$b))
#print(k)
}
library(vqtl)
?mean.qtl.dom
??mean.qtl.dom
### developing code for combination ratios for qPCR ###
name = c('x','x','y','y','z','z')
a = c(1,2,3,4,5,6)
b = c(7,8,9,10,11,12)
m = data.frame(cbind(name,a,b), stringsAsFactors = FALSE)
# this function divides every item in column 1 by every item in column 2
divide <- function(col1, col2){
r = c()
for (i in col1){
r = cbind(r,col1[i]/col2)
}
return(r)
}
# change the components of the matrix to numeric
m$a = as.numeric(m$a)
m$b = as.numeric(m$b)
divide(a,b)
# split the matrix by each group
group = split(m, name)
print(group)
for (k in group){
print(divide(k$a, k$b))
#print(k)
}
print(finalg)
#stt grade calc
mid = .74
proj = c(14/15, 1,1,1,1)
final = 1
pres = 1
paper = 1
finalg = sum(mid*0.15, ave(proj)*.45, final*.2, pres*.1, paper*.1)
print(finalg)
mid = 74
proj = c((14/15)*100, 100,100,100,100)
final = 100
pres = 100
paper = 100
finalg = sum(mid*0.15, ave(proj)*.45, final*.2, pres*.1, paper*.1)
print(finalg)
0.15+0.45+0.2+0.1+0.1
ave(proj)
mean(proj)
finalg = sum(mid*0.15, mean(proj)*.45, final*.2, pres*.1, paper*.1)
print(finalg)
mid = 74
proj = c((14/15)*100, 100,100,100,100)
final = 75
pres = 75
paper = 75
finalg = sum(mid*0.15, mean(proj)*.45, final*.2, pres*.1, paper*.1)
print(finalg)
mid = 74
proj = c((14/15)*100, 100,100,100,100)
final = 75
pres = 80
paper = 80
finalg = sum(mid*0.15, mean(proj)*.45, final*.2, pres*.1, paper*.1)
print(finalg)
mid = 74
proj = c((14/15)*100, 100,100,100,100)
final = 75
pres = 90
paper = 90
finalg = sum(mid*0.15, mean(proj)*.45, final*.2, pres*.1, paper*.1)
print(finalg)
14/15
mid = 74
proj = c((14/15)*100, 100,100,100,100)
final = 75
pres = (14/15)*100
paper = (14/15)*100
finalg = sum(mid*0.15, mean(proj)*.45, final*.2, pres*.1, paper*.1)
print(finalg)
#stt grade calc
mid = 74
proj = c((14/15)*100, 100,100,100,100)
final = 80
pres = (14/15)*100
paper = (14/15)*100
finalg = sum(mid*0.15, mean(proj)*.45, final*.2, pres*.1, paper*.1)
print(finalg)
?matrix(
)
m = matrix(c(1,2,3,4,5,6,7,8,9), nrow =3 )
m\
m
flatten(m, across = "rows")
new = as.vector(m)
new
new = as.vector(as.data.frame(m)
)
new
newvector = as.vector(m)
new = as.vector(as.matrix.data.frame(m))
m = matrix(c(1,2,3,4,5,6,7,8,9), nrow =3 )
newvector = as.vector(m)
new = as.vector(as.matrix.data.frame(m))
new
?rep()
?sort()
grades
matrix(0,10,7)
install.packages('GroupFusedMulti')
## Not run: data(nes96)
attach(nes96)
install.packages('gfmR')
## Not run: data(nes96)
attach(nes96)
library(tidyr)
library(pracma)
library(stringr)
library(tidyverse)
library(dplyr)
library(MASS)
library(glm.predict)
library(Stack)
install.packages('Stack')
library(tidyr)
library(pracma)
library(stringr)
library(tidyverse)
library(dplyr)
library(MASS)
library(glm.predict)
library(Stack)
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/2018_6")
