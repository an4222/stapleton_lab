exp_data$test1.exp = as.numeric(as.character(exp_data$test1.exp))
exp_data$allP.exp = as.numeric(as.character(exp_data$allP.exp))
# Calculate ratios for experimental data
ratio.exp = exp_data$allP.exp/exp_data$test1.exp
# Append ratios to data set
exp_data = cbind(exp_data, ratio.exp)
View(exp_data)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
View(new)
predict = as.data.frame(predict(OLR, new , interval = "confidence"), sampleID.exp)
View(predict)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"), sampleID.exp)
View(exp_predict_sq)
names(exp_predict_sq)
View(exp_data)
?match
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence")
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
View(exp_predict_sq)
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
View(exp_predict_sq)
# Rename columns
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
View(exp_predict_sq)
# Append matched starting quantity predictions with complete experimental data frame
exp_data_predict = as.data.frame(match(exp_data$sampleID.exp, exp_predict_sq))
View(exp_data_predict)
# Append matched starting quantity predictions with complete experimental data frame
exp_data_predict = as.data.frame(match(exp_data$sampleID.exp, exp_predict_sq$sampleID.exp))
View(exp_data_predict)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
# Append matched starting quantity predictions with complete experimental data frame
exp_data_predict = as.data.frame(match(exp_data$sampleID.exp, exp_predict_sq$sampleID.exp))
View(exp_data_predict)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
View(exp_predict_sq)
# Append matched starting quantity predictions with complete experimental data frame
exp_data_predict = as.data.frame(match(exp_data$sampleID.exp, exp_predict_sq$sampleID.exp, nomatch="N/A"))
# Append matched starting quantity predictions with complete experimental data frame
exp_data_predict = as.data.frame(match(exp_data$sampleID.exp, exp_predict_sq$sampleID.exp)
)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
View(exp_predict_sq)
View(exp_data)
exp_predict_sq[c(2,1)]
exp_predict_sq = exp_predict_sq[c(2,1)]
View(exp_predict_sq)
# Append matched starting quantity predictions with complete experimental data frame
exp_data_predict = as.data.frame(match(exp_data$sampleID.exp, exp_predict_sq$sampleID.exp))
View(exp_data_predict)
exp_predict_sq$allP.exp = as.numeric(as.character(exp_predict_sq$sampleID.exp))
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns, re-order
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
exp_predict_sq = exp_predict_sq[c(2,1)]
exp_predict_sq$test1.exp = as.numeric(as.character(exp_predict_sq$predicted_sq))
exp_predict_sq$allP.exp = as.numeric(as.character(exp_predict_sq$sampleID.exp))
View(exp_predict_sq)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns, re-order
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
exp_predict_sq = exp_predict_sq[c(2,1)]
exp_predict_sq$predicted_sq = as.numeric(as.character(exp_predict_sq$predicted_sq))
exp_predict_sq$sampleID.exp = as.numeric(as.character(exp_predict_sq$sampleID.exp))
View(exp_predict_sq)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns, re-order
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
exp_predict_sq = exp_predict_sq[c(2,1)]
exp_predict_sq$predicted_sq = as.numeric(as.character(exp_predict_sq$predicted_sq))
View(exp_predict_sq)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns, re-order
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
exp_predict_sq = exp_predict_sq[c(2,1)]
View(exp_predict_sq)
exp_predict_sq$predicted_sq = as.numeric(as.character(exp_predict_sq$predicted_sq))
exp_predict_sq$sampleID.exp = as.numeric(as.character(exp_predict_sq$sampleID.exp))
exp_data_predict = merge.data.frame(exp_data, exp_predict_sq, by="sampleID.exp")
View(exp_data_predict)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns, re-order
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
exp_predict_sq = exp_predict_sq[c(2,1)]
#exp_predict_sq$predicted_sq = as.numeric(as.character(exp_predict_sq$predicted_sq))
#exp_predict_sq$sampleID.exp = as.numeric(as.character(exp_predict_sq$sampleID.exp))
# Append matched starting quantity predictions with complete experimental data frame
exp_data_predict = as.data.frame(match(exp_data$sampleID.exp, exp_predict_sq$sampleID.exp))
View(exp_data_predict)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns, re-order
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
exp_predict_sq = exp_predict_sq[c(2,1)]
View(exp_predict_sq)
exp_data_predict = merge.data.frame(exp_data, exp_predict_sq, by="sampleID.exp")
View(exp_data_predict)
#exp_predict_sq$predicted_sq = as.numeric(as.character(exp_predict_sq$predicted_sq))
#exp_predict_sq$sampleID.exp = as.numeric(as.character(exp_predict_sq$sampleID.exp))
# Merge complete experimental data frame with predicted starting quantities data frame by sample ID
exp_data_predict = merge.data.frame(exp_data, exp_predict_sq, by="sampleID.exp")
View(exp_data_predict)
# Create empty vectors for for-loop input
data = as.data.frame(calib_data)
# Create empty vectors for for-loop input
data = as.data.frame(exp_data_predict)
View(data)
# Create empty vectors for for-loop input
data = as.data.frame(exp_data_predict)
data$sampleID.exp = as.numeric(as.character(data$sampleID.exp))
View(data)
# Create empty vectors for for-loop input
data = as.data.frame(exp_data_predict)
#data$sampleID.exp = as.numeric(as.character(data$sampleID.exp))
data$allP.exp = as.numeric(as.character(data$allP.exp))
data$test1.exp = as.numeric(as.character(data$test1.exp))
data$ratio.exp = as.numeric(as.character(data$ratio.exp))
data$predicted_sq = as.numeric(as.character(data$predicted_sq))
View(data)
adj_val = c()
allP = c()
startq = c()
ratio =data$allP.exp/data$test1.exp
# Itterating through each set of (3) observations performing U-Stats on each set of inputs
for (i in 1:(nrow(data)/3)){
t_x <- c(data$allP[3*i - 2], data$allP[3*i - 1], data$allP[3*i])
t_y <- c(data$test1[3*i - 2], data$test1[3*i - 1], data$test1[3*i])
adj <- mean(outer(t_x, t_y, "-"))
adj_val <- c(adj_val, adj, adj, adj)
}
adjusted_test1 <- test1 + adj_val
adj_val = c()
allP = c()
startq = c()
ratio =data$allP.exp/data$test1.exp
# Itterating through each set of (3) observations performing U-Stats on each set of inputs
for (i in 1:(nrow(data)/3)){
t_x <- c(data$allP.exp[3*i - 2], data$allP.exp[3*i - 1], data$allP.exp[3*i])
t_y <- c(data$test1.exp[3*i - 2], data$test1.exp[3*i - 1], data$test1.exp[3*i])
adj <- mean(outer(t_x, t_y, "-"))
adj_val <- c(adj_val, adj, adj, adj)
}
adjusted_test1 <- test1 + adj_val
adjusted_test1 <- test1.exp + adj_val
adj_val = c()
allP = c()
startq = c()
ratio =data$allP.exp/data$test1.exp
# Itterating through each set of (3) observations performing U-Stats on each set of inputs
for (i in 1:(nrow(data)/3)){
t_x <- c(data$allP.exp[3*i - 2], data$allP.exp[3*i - 1], data$allP.exp[3*i])
t_y <- c(data$test1.exp[3*i - 2], data$test1.exp[3*i - 1], data$test1.exp[3*i])
adj <- mean(outer(t_x, t_y, "-"))
adj_val <- c(adj_val, adj, adj, adj)
}
adjusted_test1 <- test1.exp + adj_val
length(test1.exp)
length(adj_val)
View(test1.exp)
View(adj_val)
library(tidyr)
library(pracma)
library(stringr)
library(tidyverse)
library(dplyr)
library(MASS)
# Mac Directory
setwd("~/Stapleton_Lab/Stapleton_Lab/Stress_Splicing/2018_6")
# In the case of having one CSV containing calculated derivatives, use this code:
#deriv=read.csv(file = "(YEAR_MONTH_PLATE_qPCR_output.csv", header=FALSE)
deriv=read.csv(file = "2018_06_01_plate_qPCR_output_2019_04_04.csv", header=FALSE)
# Remove extra labels row and column
deriv = deriv[-1,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=TRUE)
# Remove blank column (4th)
#deriv = deriv[,-5]
# Rename columns
colnames(deriv)=c("reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
# Remove extra labels row
deriv=deriv[-1,]
### Removing NTC and gblock-Minus values ###
# Indicate if sample is NTC (negative control)
deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# Remove NTC samples, indicator (T/F) column, and cpD2 values
ntc = which(deriv$sampleID_NTC)
deriv = deriv[-ntc,]
deriv = deriv[,-c(5,6)]
# Indicate if sample is 'Plus' or 'Minus'
deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
minus = which(deriv$sampleID_Minus)
deriv = deriv[-minus,]
deriv = deriv[,-c(5)]
# Create/Write data frame for Calibrated values
calib_df = deriv %>% filter(str_detect(sampleID, "g"))
# Sort by starting quantity
calib_df = calib_df[order(calib_df$starting_quantity),]
calib_df$starting_quantity = as.numeric(as.character(calib_df$starting_quantity))
calib_df$cpD1 = as.numeric(as.character(calib_df$cpD1))
calib_data = calib_df
# Create empty vectors for for-loop to input cpD1 values
test1 = c()
allP = c()
startq = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(calib_df$starting_quantity)){
sq <- calib_df$starting_quantity[i]
if(i %% 6 == 1){
startq = c(startq,sq,sq,sq)
}
val <- toString(calib_df$reaction_type[i])
if(strcmp(val, "test1")){
test1 = c(test1, calib_df$cpD1[i])
}
if(strcmp(val, "all_products")){
allP = c(allP, calib_df$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by starting quantity
calib_data = as.data.frame(cbind(startq, test1, allP))
# Format starting quantity values as decimals, not scientific notation
calib_data$startq=as.factor(format(calib_data$startq, scientific=FALSE))
calib_data$startq=as.factor(calib_data$startq)
ratio = calib_data$allP/calib_data$test1
# Append ratios to data set
calib_data = cbind(calib_data, ratio)
View(calib_data)
##########################################################
##### Ordinal Logicistic Regression Calibrated Data ######
##########################################################
calib_data$startq = ordered(calib_data$startq, levels = levels(calib_data$startq))
calib_data$ratio = allP/test1
# Ordinal Logistic
OLR = polr(startq~ratio,data = calib_data, Hess = TRUE)
summary(OLR)
(ctable <- coef(summary(OLR)))
##########################################################
################ Experimental Data Framing ###############
##########################################################
# Create/Write data frame for Experimental values
exp_df = deriv %>% filter(str_detect(sampleID, "g")==FALSE)
# ##########################################################
# ########### ADJUSTMENT MODEL - Calibrated Data ###########
# ##########################################################
#
# Create empty vectors for for-loop input
data = as.data.frame(calib_data)
data$test1 = as.numeric(as.character(data$test1))
data$allP = as.numeric(as.character(data$allP))
adj_val = c()
allP = c()
startq = c()
ratio =data$allP/data$test1
# Itterating through each set of (3) observations performing U-Stats on each set of inputs
for (i in 1:(nrow(data)/3)){
t_x <- c(data$allP[3*i - 2], data$allP[3*i - 1], data$allP[3*i])
t_y <- c(data$test1[3*i - 2], data$test1[3*i - 1], data$test1[3*i])
adj <- mean(outer(t_x, t_y, "-"))
adj_val <- c(adj_val, adj, adj, adj)
}
#adjusted_test1 <- test1 + adj_val
# Append adjusted test1 values and adjustment value to data set
calib_data=cbind(data,adjusted_test1,adj_val)
# Append adjusted test1 values and adjustment value to data set
calib_data=cbind(data,adjusted_test1,adj_val)
# ##########################################################
# ########### ADJUSTMENT MODEL - Calibrated Data ###########
# ##########################################################
#
# Create empty vectors for for-loop input
data = as.data.frame(calib_data)
data$test1 = as.numeric(as.character(data$test1))
data$allP = as.numeric(as.character(data$allP))
adj_val = c()
allP = c()
startq = c()
ratio =data$allP/data$test1
# Itterating through each set of (3) observations performing U-Stats on each set of inputs
for (i in 1:(nrow(data)/3)){
t_x <- c(data$allP[3*i - 2], data$allP[3*i - 1], data$allP[3*i])
t_y <- c(data$test1[3*i - 2], data$test1[3*i - 1], data$test1[3*i])
adj <- mean(outer(t_x, t_y, "-"))
adj_val <- c(adj_val, adj, adj, adj)
}
adjusted_test1 <- test1 + adj_val
# Append adjusted test1 values and adjustment value to data set
calib_data=cbind(data,adjusted_test1,adj_val)
View(calib_data)
typeof(adj_val)
##########################################################
################ Experimental Data Framing ###############
##########################################################
# Create/Write data frame for Experimental values
exp_df = deriv %>% filter(str_detect(sampleID, "g")==FALSE)
# Sort by starting quantity
exp_df = exp_df[order(exp_df$starting_quantity),]
# Remove first and last rows (unnecessary labeling)
exp_df = exp_df[-1,]
exp_df = exp_df[-nrow(exp_df),]
#exp_df$sampleID = as.numeric(as.character(exp_df$sampleID))
exp_df$cpD1 = as.numeric(as.character(exp_df$cpD1))
exp_data = exp_df
# Order data by sampleID
exp_data = exp_data[order(exp_data$sampleID),]
### Finding invalid observations ###
# Find counts of each unique sampleID; for sample with a count not equal to 2, remove from data frame
counts = as.data.frame(table(exp_data$sampleID))
countsne2 = as.data.frame(filter(counts, !counts$Freq==2))
countsne2$Var1 = as.numeric(as.character(countsne2$Var1)) #---> CHECK IF THIS IS NECESSARY
# Remove invalid observations from data set
exp_data = exp_data[!exp_data$sampleID %in% countsne2$Var1,]
# Create empty vectors for for-loop to input cpD1 values
test1.exp = c()
allP.exp = c()
sampleID.exp = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(exp_data$sampleID)){
id.exp = toString(exp_data$sampleID[i])
if(i %% 2 == 1){
sampleID.exp = c(sampleID.exp, id.exp)
}
val = toString(exp_data$reaction_type[i])
if(strcmp(val, "test1")){
test1.exp = c(test1.exp, exp_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP.exp = c(allP.exp, exp_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by sample ID, convert to data frame
exp_data = as.data.frame(cbind(sampleID.exp, test1.exp, allP.exp))
#exp_data$sampleID.exp = as.numeric(as.character(exp_data$sampleID.exp))
exp_data$test1.exp = as.numeric(as.character(exp_data$test1.exp))
exp_data$allP.exp = as.numeric(as.character(exp_data$allP.exp))
# Calculate ratios for experimental data
ratio.exp = exp_data$allP.exp/exp_data$test1.exp
# Append ratios to data set
exp_data = cbind(exp_data, ratio.exp)
View(exp_data)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns, re-order
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
exp_predict_sq = exp_predict_sq[c(2,1)]
#exp_predict_sq$predicted_sq = as.numeric(as.character(exp_predict_sq$predicted_sq))
#exp_predict_sq$sampleID.exp = as.numeric(as.character(exp_predict_sq$sampleID.exp))
# Merge complete experimental data frame with predicted starting quantities data frame by sample ID
exp_data_predict = merge.data.frame(exp_data, exp_predict_sq, by="sampleID.exp")
View(exp_data_predict)
# PLOTS
boxplot(calib_data$ratio, exp_data_predict$ratio.exp)
# PLOTS for Presentation
boxplot(calib_data$ratio, exp_data_predict$ratio.exp)
?filter
# Filter observatinos with unusual (~1.00) CP vals
#exp_data_filtered = filter(exp_data_predict, exp_data_predict$test1.exp, exp_data_predict$allP.exp)
exp_data_predict_t1 = exp_data_predict %>% filter(exp_data_predict$test1.exp < 2)
View(exp_data_predict_t1)
# Filter observatinos with unusual (~1.00) CP vals
#exp_data_filtered = filter(exp_data_predict, exp_data_predict$test1.exp, exp_data_predict$allP.exp)
exp_data_filtered = exp_data_predict %>% filter(exp_data_predict$test1.exp < 2 == FALSE)
# Filter observatinos with unusual (~1.00) CP vals
#exp_data_filtered = filter(exp_data_predict, exp_data_predict$test1.exp, exp_data_predict$allP.exp)
exp_data_filtered = exp_data_predict %>% filter((exp_data_predict$test1.exp < 2) == FALSE)
View(exp_data_filtered)
min(exp_data_filtered$test1.exp)
exp_data_filtered = exp_data_filtered %>% filter((exp_data_filtered$allP.exp < 2) == FALSE)
min(exp_data_filtered$allP.exp)
# Boxplot comparing calib and exp ratios
boxplot(calib_data$ratio, exp_data_filtered$ratio.exp)
# Boxplot comparing calib and exp ratios
boxplot(calib_data$ratio, exp_data_filtered$ratio.exp, ylab="Ratio", names=c("Calibrated", "Experimental"))
# Boxplot comparing calib and exp ratios
boxplot(calib_data$ratio, exp_data_filtered$ratio.exp, ylab="Ratio", names=c("Calibrated", "Experimental"), main="Comparison of Ratios")
plot(lm(calib_data$adjusted_test1 ~calib_data$ratio))
plot(lm(calib_data$adjusted_test1 ~calib_data$ratio))
View(calib_df)
View(calib_data)
new.data=merge(exp_data_predict$predicted_sq, calib_data$startq, by.x="predicted_sq", by.y="startq")
new.data=merge(exp_data_predict$predicted_sq, calib_data$startq, by.x=exp_data_predict$predicted_sq, by.y=calib_data$startq)
new.data=merge(exp_data_predict$predicted_sq, calib_data$startq, by.x=predicted_sq, by.y=startq)
new.data=merge(exp_data_predict$predicted_sq, calib_data$startq, all.x=TRUE)
View(new.data)
new.data=merge(exp_data_predict$predicted_sq, calib_data$startq)
View(new.data)
View(OLR)
sq.adjval = cbind(calib_data$startq, calib_data$adj_val)
View(sq.adjval)
sq.adjval = as.data.frame(cbind(calib_data$startq, calib_data$adj_val))
View(sq.adjval)
sq.adjval = as.data.frame(cbind(as.numeric(as.character(calib_data$startq)), calib_data$adj_val))
View(sq.adjval)
sq.adjval$V1=as.factor(format(sq.adjval$V1, scientific=FALSE))
View(sq.adjval)
colnames(sq.adjval)=c("predicted_sq", "adj_val")
View(sq.adjval)
# Create new data frame containing only predicted s.q. and adj_val
sq.adjval = as.data.frame(cbind(as.numeric(as.character(calib_data$startq)), calib_data$adj_val))
sq.adjval$V1=as.factor(format(sq.adjval$V1, scientific=FALSE))
colnames(sq.adjval)=c("predicted_sq", "adj_val")
View(sq.adjval)
?distinct
# Match adjustment value for each s.q. with corresponding predicted s.q. in experimental data frame
exp_data_predict = exp_data_predict[!duplicated(exp_data_predict), ]
View(exp_data_predict)
# Match adjustment value for each s.q. with corresponding predicted s.q. in experimental data frame
sq.adjval = sq.adjval[!duplicated(sq.adjval), ]
View(sq.adjval)
View(exp_data_predict_t1)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns, re-order
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
exp_predict_sq = exp_predict_sq[c(2,1)]
#exp_predict_sq$predicted_sq = as.numeric(as.character(exp_predict_sq$predicted_sq))
#exp_predict_sq$sampleID.exp = as.numeric(as.character(exp_predict_sq$sampleID.exp))
# Merge complete experimental data frame with predicted starting quantities data frame by sample ID
exp_data_predict = merge.data.frame(exp_data, exp_predict_sq, by="sampleID.exp")
View(exp_data_predict)
# Match adjustment value for each s.q. with corresponding predicted s.q. in experimental data frame
exp_data_predict_2 = merge(exp_data_predict, sq.adjval, by='predicted_sq')
View(exp_data_predict_t1)
View(exp_data_predict_2)
exp_data_predict_2 = exp_data_predict_2[order(exp_data_predict_2$sampleID.exp),]
View(exp_data_predict_2)
exp_data_predict_2 = exp_data_predict_2[c(2,3,4,5,6,1)]
View(exp_data_predict_2)
# Match adjustment value for each s.q. with corresponding predicted s.q. in experimental data frame
exp_data_predict = merge(exp_data_predict, sq.adjval, by='predicted_sq')
exp_data_predict = exp_data_predict[order(exp_data_predict_2$sampleID.exp),]
exp_data_predict = exp_data_predict[c(2,3,4,5,6,1)]
View(exp_data_predict)
# Match adjustment value for each s.q. with corresponding predicted s.q. in experimental data frame
exp_data_predict = merge(exp_data_predict, sq.adjval, by='predicted_sq')
exp_data_predict = exp_data_predict[order(exp_data_predict$sampleID.exp),]
exp_data_predict = exp_data_predict[c(2,3,4,5,6,1)]
View(exp_data_predict)
# Using the adjustment model on the expiremental data
new = data.frame((ratio = exp_data$allP/exp_data$test1), sampleID.exp)
exp_predict_sq = as.data.frame(predict(OLR, new , interval = "confidence"))
# Append sample ID's and corresponding starting quantity predictions
exp_predict_sq = cbind(exp_predict_sq, exp_data$sampleID.exp)
# Rename columns, re-order
colnames(exp_predict_sq)=c("predicted_sq", "sampleID.exp")
exp_predict_sq = exp_predict_sq[c(2,1)]
#exp_predict_sq$predicted_sq = as.numeric(as.character(exp_predict_sq$predicted_sq))
#exp_predict_sq$sampleID.exp = as.numeric(as.character(exp_predict_sq$sampleID.exp))
# Merge complete experimental data frame with predicted starting quantities data frame by sample ID
exp_data_predict = merge.data.frame(exp_data, exp_predict_sq, by="sampleID.exp")
# Create new data frame containing only predicted s.q. and adj_val
sq.adjval = as.data.frame(cbind(as.numeric(as.character(calib_data$startq)), calib_data$adj_val))
sq.adjval$V1=as.factor(format(sq.adjval$V1, scientific=FALSE))
colnames(sq.adjval)=c("predicted_sq", "adj_val")
# Remove repeat rows
sq.adjval = sq.adjval[!duplicated(sq.adjval), ]
# Match adjustment value for each s.q. with corresponding predicted s.q. in experimental data frame
exp_data_predict = merge(exp_data_predict, sq.adjval, by='predicted_sq')
exp_data_predict = exp_data_predict[order(exp_data_predict$sampleID.exp),]
exp_data_predict = exp_data_predict[c(2,3,4,5,6,1)]
View(exp_data_predict)
