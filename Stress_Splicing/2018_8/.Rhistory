exp_data = exp_data[!exp_data$sampleID %in% countsne2$Var1,]
# Create empty vectors for for-loop to input cpD1 values
test1.exp = c()
allP.exp = c()
sampleID.exp = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(exp_data$sampleID)){
id.exp = toString(exp_data$sampleID[i])
if(i %% 2 == 1){
sampleID.exp = c(sampleID.exp, id.exp)
}
val = toString(exp_data$reaction_type[i])
if(strcmp(val, "test1")){
test1.exp = c(test1.exp, exp_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP.exp = c(allP.exp, exp_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by sample ID, convert to data frame
exp_data = as.data.frame(cbind(sampleID.exp, test1.exp, allP.exp))
exp_data$test1.exp = as.numeric(as.character(exp_data$test1.exp))
exp_data$allP.exp = as.numeric(as.character(exp_data$allP.exp))
# Calculate ratios for experimental data
ratio.exp = exp_data$allP.exp/exp_data$test1.exp
# Append ratios to data set
exp_data = cbind(exp_data, ratio.exp)
### COMPLETED EXPERIMENTAL DATA FRAME ###
##########################################################
############### Combination Ratios for qPCR ##############
##########################################################
startquan = as.character(calib_data$startq)
allprod = calib_data$allP
t1 = calib_data$test1
dat = data.frame(cbind(startquan,allprod,t1), stringsAsFactors = FALSE)
dat$allprod = as.numeric(dat$allprod)
dat$t1 = as.numeric(dat$t1)
#Create divide funtion - every element in column 1 divided by every element in column 2
divide <- function(col1, col2){
ratio = NULL;
for (i in col1){
ratio = c(ratio,i/col2)
}
return(ratio)
}
#Subset data by starting quantity
group = split.data.frame(dat, dat$startquan)
# Calculate combination ratios at each starting quantity
combratio = NULL;
for (k in group){
combratio = cbind(combratio, divide(k$allprod, k$t1))
}
# Create data frame with unique ratios at each starting quantity
startqvalues = rep(unique(startquan), rep(length(unique(startquan)),length(unique(startquan))))
newratios.calib = data.frame(rbind(unique(startqvalues), combratio), stringsAsFactors = FALSE)
# Duplicate newratios.calib data frame
newratios.calib = as.data.frame(newratios.calib)
colnames(newratios.calib) = c("0.01", "0.05", "0.10", "0.50", "1.00", "50.00")
newratios.calib = newratios.calib[-1,]
newratiosvector = as.numeric(as.vector(as.matrix.data.frame(newratios.calib)))
startqvector = sort(rep(unique(startquan), length(newratios.calib$`0.01`)))
newratios.calib = as.data.frame(cbind(newratiosvector, startqvector), stringsAsFactors = FALSE)
### COMPLETED COMBINATION RATIOS ###
# Calculate z-score for calibrated data
zscore = (newratiosvector - mean(newratiosvector))/sd(newratiosvector)
# Predict calibrated data ratios using experimental data
pred.ratio = zscore*sd(ratio.exp)+mean(ratio.exp)
# Append y (predicted calibrated ratios) to calibrated data frame -- CALIBRATED RATIOS IN TERMS OF EXPERIMENTAL PARAMETERS
calib_data = cbind(calib_data, pred.ratio)
# Create empty vectors for for-loop input
calib_data$test1 = as.numeric(as.character(calib_data$test1))
calib_data$allP = as.numeric(as.character(calib_data$allP))
adj_val = c()
allP = c()
startq = c()
ratio =calib_data$allP/calib_data$test1
# Itterating through each set of (3) observations performing U-Stats on each set of inputs
for (i in 1:(nrow(calib_data)/3)){
t_x <- c(calib_data$allP[3*i - 2], calib_data$allP[3*i - 1], calib_data$allP[3*i])
t_y <- c(calib_data$test1[3*i - 2], calib_data$test1[3*i - 1], calib_data$test1[3*i])
adj <- mean(outer(t_x, t_y, "-"))
adj_val <- c(adj_val, adj, adj, adj)
}
adjusted_test1 <- test1 + adj_val
# Append adjusted test1 values and adjustment value to data set
calib_data=cbind(calib_data,adjusted_test1,adj_val)
# Write Calibrated Data CSV --> Used in "qPCR_Plotting" code for visuals
#write.csv(file="YEAR_MONTH_Calibrated_DF", calib_data)
# Adjustment: allP - test1 -- Using in model to multiply probability matrix by
calib_data$diff = calib_data$allP - calib_data$adjusted_test1
# CREATE DATA FRAME WITH ONLY S.Q. AND ADJUSTMENT VAL
calib_adj = calib_data[,c(1,6)]
average <- function(col1){
avg = NULL;
for (i in col1){
avg = c(avg,mean(col1))
}
return(avg)
}
#Subset data by starting quantity
group = split.data.frame(calib_adj, calib_adj$startq)
adj.test1.avg = NULL;
for (k in group){
adj.test1.avg = c(adj.test1.avg, average(k$adjusted_test1))
}
print(adj.test1.avg)
calib_adj = as.data.frame(unique(cbind(as.character(calib_data$startq), adj.test1.avg)))
calib_adj$adj.test1.avg = as.numeric(as.character(calib_adj$adj.test1.avg))
# Rename columns
colnames(calib_adj)=c("startq", "adj.test1.avg")
# Ordinal Logistic Regression Model - starting quantity as response to calibrated z-score
model = polr(as.factor(calib_data$startq) ~ zscore, Hess = TRUE)
calib_adj = as.data.frame(unique(cbind(as.character(calib_data$startq), adj.test1.avg)))
# Calculate z-score for calibrated data
zscore = (newratiosvector - mean(newratiosvector))/sd(newratiosvector)
# Predict calibrated data ratios using experimental data
pred.ratio = zscore*sd(ratio.exp)+mean(ratio.exp)
# Append y (predicted calibrated ratios) to calibrated data frame -- CALIBRATED RATIOS IN TERMS OF EXPERIMENTAL PARAMETERS
calib_data = cbind(calib_data, pred.ratio)
deriv.1<-read.csv(file = "2018_8_1_qPCR_Output.csv", header=FALSE)
deriv.2<-read.csv(file = "2018_8_2_qPCR_Output.csv", header=FALSE)
deriv.3=read.csv(file = "2018_8_3_qPCR_Output.csv", header=FALSE)
deriv_complete=as.data.frame(cbind(deriv.1, deriv.2, deriv.3))
# In the case of having one CSV containing calculated derivatives, use this code:
#deriv=read.csv(file = "2018_8_1_plate_qPCR_output.csv", header=FALSE)
##########################################################
################### Initial Data Framing #################
##########################################################
deriv = deriv_complete
# Remove extra column
deriv = deriv[,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=TRUE)
# Rename columns
colnames(deriv)=c("plateID", "reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
# Indicate if sample is NTC (negative control)
deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# Remove NTC samples, indicator (T/F) column, and cpD2 values
ntc = which(deriv$sampleID_NTC)
deriv = deriv[-ntc,]
deriv = deriv[,-c(6,7)]
# Indicate if sample is 'Plus' or 'Minus'
deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
minus = which(deriv$sampleID_Minus)
# IF "minus" RETURNS EMPTY VALUES, COMMENT OUT COMMAND BELOW
deriv = deriv[-minus,]
deriv = deriv[,-6]
# Remove two extra label rows from center of data frame
deriv['label.row'] = grepl('3', deriv$starting_quantity)
extra = which(deriv$label.row)
deriv = deriv[-extra,]
deriv = deriv[,-6]
deriv$cpD1 = as.numeric(as.character(deriv$cpD1))
### COMPLETED INITIAL DATA FRAMING ###
##########################################################
############ Removing Ununsual Observations ##############
##########################################################
# Remove unusual observations from initial data frame (CT value less than 10)
unusual_obs_2018_8 = deriv %>% filter(deriv$cpD1 < 10)
deriv = deriv %>% filter(deriv$cpD1 >= 10)
# ### WORK ON: Appending raw plate cycle vals to unusual obs d.f.
# # Read in raw cycle data
# cycle1 = read.csv(file = "2018_8_1_plate.csv", header = FALSE)
# cycle2 = read.csv(file = "2018_8_2_plate.csv", header = FALSE)
# cycle3 = read.csv(file = "2018_8_3_plate.csv", header = FALSE)
# cycle = as.data.frame(cbind(cycle1, cycle2, cycle3))
# unusual_obs_2018_8 = match()
# ### COMPLETED UNUSUAL OBSERVATIONS REMOVAL/REPORTING ###
##########################################################
################# Calibrated Data Framing ################
##########################################################
# Create/Write data frame for Calibrated values
calib_data = deriv %>% filter(str_detect(sampleID, "g"))
# Sort by starting quantity
calib_data = calib_data[order(calib_data$starting_quantity),]
calib_data$starting_quantity = as.numeric(as.character(calib_data$starting_quantity))
calib_data$cpD1 = as.numeric(as.character(calib_data$cpD1))
# Create empty vectors for for-loop to input cpD1 values
test1 = c()
allP = c()
startq = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(calib_data$starting_quantity)){
sq <- calib_data$starting_quantity[i]
if(i %% 6 == 1){
startq = c(startq,sq,sq,sq)
}
val <- toString(calib_data$reaction_type[i])
if(strcmp(val, "test1")){
test1 = c(test1, calib_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP = c(allP, calib_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by starting quantity
calib_data = as.data.frame(cbind(startq, test1, allP))
# Format starting quantity values as decimals, not scientific notation
calib_data$startq = as.factor(format(calib_data$startq, scientific=FALSE))
calib_data$startq = as.factor(calib_data$startq)
# Calculate ratio of allP/test1 --> PAIRWISE RATIOS -- INPUT FOR OLR MODEL
ratio = calib_data$allP/calib_data$test1
# Append ratios to data set
calib_data = cbind(calib_data, ratio)
### COMPLETED CALIBRATED DATA FRAME ###
##########################################################
############### Experimental Data Framing ################
##########################################################
# Create/Write data frame for Experimental values
exp_data = deriv %>% filter(str_detect(sampleID, "g")==FALSE)
# Sort by starting quantity
exp_data = exp_data[order(exp_data$starting_quantity),]
# # Remove first and last rows (unnecessary labeling)
# exp_data = exp_data[-1,]
# exp_data = exp_data[-nrow(exp_data),]
exp_data$cpD1 = as.numeric(as.character(exp_data$cpD1))
# Order data by sampleID
exp_data = exp_data[order(exp_data$sampleID),]
### Finding invalid observations ###
# Find invalid observations - Find counts of each unique sampleID; remove ones with count not equal to 2 from data frame
counts = as.data.frame(table(exp_data$sampleID))
countsne2 = as.data.frame(filter(counts, !counts$Freq==2))
countsne2$Var1 = as.numeric(as.character(countsne2$Var1))
# Remove observations with count not equal to 2 from data set
exp_data = exp_data[!exp_data$sampleID %in% countsne2$Var1,]
# Create empty vectors for for-loop to input cpD1 values
test1.exp = c()
allP.exp = c()
sampleID.exp = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(exp_data$sampleID)){
id.exp = toString(exp_data$sampleID[i])
if(i %% 2 == 1){
sampleID.exp = c(sampleID.exp, id.exp)
}
val = toString(exp_data$reaction_type[i])
if(strcmp(val, "test1")){
test1.exp = c(test1.exp, exp_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP.exp = c(allP.exp, exp_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by sample ID, convert to data frame
exp_data = as.data.frame(cbind(sampleID.exp, test1.exp, allP.exp))
exp_data$test1.exp = as.numeric(as.character(exp_data$test1.exp))
exp_data$allP.exp = as.numeric(as.character(exp_data$allP.exp))
# Calculate ratios for experimental data
ratio.exp = exp_data$allP.exp/exp_data$test1.exp
# Append ratios to data set
exp_data = cbind(exp_data, ratio.exp)
### COMPLETED EXPERIMENTAL DATA FRAME ###
##########################################################
############### Combination Ratios for qPCR ##############
##########################################################
startquan = as.character(calib_data$startq)
allprod = calib_data$allP
t1 = calib_data$test1
dat = data.frame(cbind(startquan,allprod,t1), stringsAsFactors = FALSE)
dat$allprod = as.numeric(dat$allprod)
dat$t1 = as.numeric(dat$t1)
#Create divide funtion - every element in column 1 divided by every element in column 2
divide <- function(col1, col2){
ratio = NULL;
for (i in col1){
ratio = c(ratio,i/col2)
}
return(ratio)
}
#Subset data by starting quantity
group = split.data.frame(dat, dat$startquan)
# Calculate combination ratios at each starting quantity
combratio = NULL;
for (k in group){
combratio = cbind(combratio, divide(k$allprod, k$t1))
}
# Create data frame with unique ratios at each starting quantity
startqvalues = rep(unique(startquan), rep(length(unique(startquan)),length(unique(startquan))))
newratios.calib = data.frame(rbind(unique(startqvalues), combratio), stringsAsFactors = FALSE)
# Duplicate newratios.calib data frame
newratios.calib = as.data.frame(newratios.calib)
colnames(newratios.calib) = c("0.01", "0.05", "0.10", "0.50", "1.00", "50.00")
newratios.calib = newratios.calib[-1,]
newratiosvector = as.numeric(as.vector(as.matrix.data.frame(newratios.calib)))
startqvector = sort(rep(unique(startquan), length(newratios.calib$`0.01`)))
newratios.calib = as.data.frame(cbind(newratiosvector, startqvector), stringsAsFactors = FALSE)
# Calculate z-score for calibrated data
zscore = (newratiosvector - mean(newratiosvector))/sd(newratiosvector)
# Predict calibrated data ratios using experimental data
pred.ratio = zscore*sd(ratio.exp)+mean(ratio.exp)
# Append y (predicted calibrated ratios) to calibrated data frame -- CALIBRATED RATIOS IN TERMS OF EXPERIMENTAL PARAMETERS
calib_data = cbind(calib_data, pred.ratio)
# Create empty vectors for for-loop input
calib_data$test1 = as.numeric(as.character(calib_data$test1))
dim(calib_dat)
dim(calib_data)
length(pred.ratio)
# use this code to combine, prior to the following transpositions:
deriv.1<-read.csv(file = "2018_8_1_qPCR_Output.csv", header=FALSE)
deriv.2<-read.csv(file = "2018_8_2_qPCR_Output.csv", header=FALSE)
deriv.3=read.csv(file = "2018_8_3_qPCR_Output.csv", header=FALSE)
deriv_complete=as.data.frame(cbind(deriv.1, deriv.2, deriv.3))
# In the case of having one CSV containing calculated derivatives, use this code:
#deriv=read.csv(file = "2018_8_1_plate_qPCR_output.csv", header=FALSE)
##########################################################
################### Initial Data Framing #################
##########################################################
deriv = deriv_complete
# Remove extra column
deriv = deriv[,-1]
# Transpose derivatives to be in equivalent format as raw plate data
deriv = as.data.frame(t(deriv), header=TRUE)
# Rename columns
colnames(deriv)=c("plateID", "reaction_type", "sampleID", "starting_quantity", "cpD1", "cpD2")
# Indicate if sample is NTC (negative control)
deriv['sampleID_NTC'] = grepl('NTC', deriv$sampleID)
# Remove NTC samples, indicator (T/F) column, and cpD2 values
ntc = which(deriv$sampleID_NTC)
deriv = deriv[-ntc,]
deriv = deriv[,-c(6,7)]
# Indicate if sample is 'Plus' or 'Minus'
deriv['sampleID_Minus'] = grepl('minus', deriv$sampleID)
# Remove 'Minus' values (include only gblock+ values), and indicator (T/F) column
minus = which(deriv$sampleID_Minus)
# IF "minus" RETURNS EMPTY VALUES, COMMENT OUT COMMAND BELOW
deriv = deriv[-minus,]
deriv = deriv[,-6]
# Remove two extra label rows from center of data frame
deriv['label.row'] = grepl('3', deriv$starting_quantity)
extra = which(deriv$label.row)
deriv = deriv[-extra,]
deriv = deriv[,-6]
deriv$cpD1 = as.numeric(as.character(deriv$cpD1))
### COMPLETED INITIAL DATA FRAMING ###
##########################################################
############ Removing Ununsual Observations ##############
##########################################################
# Remove unusual observations from initial data frame (CT value less than 10)
unusual_obs_2018_8 = deriv %>% filter(deriv$cpD1 < 10)
deriv = deriv %>% filter(deriv$cpD1 >= 10)
# ### WORK ON: Appending raw plate cycle vals to unusual obs d.f.
# # Read in raw cycle data
# cycle1 = read.csv(file = "2018_8_1_plate.csv", header = FALSE)
# cycle2 = read.csv(file = "2018_8_2_plate.csv", header = FALSE)
# cycle3 = read.csv(file = "2018_8_3_plate.csv", header = FALSE)
# cycle = as.data.frame(cbind(cycle1, cycle2, cycle3))
# unusual_obs_2018_8 = match()
# ### COMPLETED UNUSUAL OBSERVATIONS REMOVAL/REPORTING ###
##########################################################
################# Calibrated Data Framing ################
##########################################################
# Create/Write data frame for Calibrated values
calib_data = deriv %>% filter(str_detect(sampleID, "g"))
# Sort by starting quantity
calib_data = calib_data[order(calib_data$starting_quantity),]
calib_data$starting_quantity = as.numeric(as.character(calib_data$starting_quantity))
calib_data$cpD1 = as.numeric(as.character(calib_data$cpD1))
# Create empty vectors for for-loop to input cpD1 values
test1 = c()
allP = c()
startq = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(calib_data$starting_quantity)){
sq <- calib_data$starting_quantity[i]
if(i %% 6 == 1){
startq = c(startq,sq,sq,sq)
}
val <- toString(calib_data$reaction_type[i])
if(strcmp(val, "test1")){
test1 = c(test1, calib_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP = c(allP, calib_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by starting quantity
calib_data = as.data.frame(cbind(startq, test1, allP))
# Format starting quantity values as decimals, not scientific notation
calib_data$startq = as.factor(format(calib_data$startq, scientific=FALSE))
calib_data$startq = as.factor(calib_data$startq)
# Calculate ratio of allP/test1 --> PAIRWISE RATIOS -- INPUT FOR OLR MODEL
ratio = calib_data$allP/calib_data$test1
# Append ratios to data set
calib_data = cbind(calib_data, ratio)
### COMPLETED CALIBRATED DATA FRAME ###
##########################################################
############### Experimental Data Framing ################
##########################################################
# Create/Write data frame for Experimental values
exp_data = deriv %>% filter(str_detect(sampleID, "g")==FALSE)
# Sort by starting quantity
exp_data = exp_data[order(exp_data$starting_quantity),]
# # Remove first and last rows (unnecessary labeling)
# exp_data = exp_data[-1,]
# exp_data = exp_data[-nrow(exp_data),]
exp_data$cpD1 = as.numeric(as.character(exp_data$cpD1))
# Order data by sampleID
exp_data = exp_data[order(exp_data$sampleID),]
### Finding invalid observations ###
# Find invalid observations - Find counts of each unique sampleID; remove ones with count not equal to 2 from data frame
counts = as.data.frame(table(exp_data$sampleID))
countsne2 = as.data.frame(filter(counts, !counts$Freq==2))
countsne2$Var1 = as.numeric(as.character(countsne2$Var1))
# Remove observations with count not equal to 2 from data set
exp_data = exp_data[!exp_data$sampleID %in% countsne2$Var1,]
# Create empty vectors for for-loop to input cpD1 values
test1.exp = c()
allP.exp = c()
sampleID.exp = c()
# For loop -- iterating thru starting quantity and reaction type to return cpD1 values
for(i in 1:length(exp_data$sampleID)){
id.exp = toString(exp_data$sampleID[i])
if(i %% 2 == 1){
sampleID.exp = c(sampleID.exp, id.exp)
}
val = toString(exp_data$reaction_type[i])
if(strcmp(val, "test1")){
test1.exp = c(test1.exp, exp_data$cpD1[i])
}
if(strcmp(val, "all_products")){
allP.exp = c(allP.exp, exp_data$cpD1[i])
}
}
# Bind test1 and allProd cpD1 values by sample ID, convert to data frame
exp_data = as.data.frame(cbind(sampleID.exp, test1.exp, allP.exp))
exp_data$test1.exp = as.numeric(as.character(exp_data$test1.exp))
exp_data$allP.exp = as.numeric(as.character(exp_data$allP.exp))
# Calculate ratios for experimental data
ratio.exp = exp_data$allP.exp/exp_data$test1.exp
# Append ratios to data set
exp_data = cbind(exp_data, ratio.exp)
### COMPLETED EXPERIMENTAL DATA FRAME ###
##########################################################
############### Combination Ratios for qPCR ##############
##########################################################
## NOT F
startquan = as.character(calib_data$startq)
allprod = calib_data$allP
t1 = calib_data$test1
dat = data.frame(cbind(startquan,allprod,t1), stringsAsFactors = FALSE)
dat$allprod = as.numeric(dat$allprod)
dat$t1 = as.numeric(dat$t1)
#Create divide funtion - every element in column 1 divided by every element in column 2
divide <- function(col1, col2){
ratio = NULL;
for (i in col1){
ratio = c(ratio,i/col2)
}
return(ratio)
}
#Subset data by starting quantity
group = split.data.frame(dat, dat$startquan)
# Calculate combination ratios at each starting quantity
combratio = NULL;
for (k in group){
combratio = cbind(combratio, divide(k$allprod, k$t1))
}
# Create data frame with unique ratios at each starting quantity
startqvalues = rep(unique(startquan), rep(length(unique(startquan)),length(unique(startquan))))
newratios.calib = data.frame(rbind(unique(startqvalues), combratio), stringsAsFactors = FALSE)
# Duplicate newratios.calib data frame
newratios.calib = as.data.frame(newratios.calib)
colnames(newratios.calib) = c("0.01", "0.05", "0.10", "0.50", "1.00", "50.00")
newratios.calib = newratios.calib[-1,]
newratiosvector = as.numeric(as.vector(as.matrix.data.frame(newratios.calib)))
startqvector = sort(rep(unique(startquan), length(newratios.calib$`0.01`)))
newratios.calib = as.data.frame(cbind(newratiosvector, startqvector), stringsAsFactors = FALSE)
# Calculate z-score for calibrated data
zscore = (newratiosvector - mean(newratiosvector))/sd(newratiosvector)
newratios.calib$zscore = zscore
# Predict calibrated data ratios using experimental data
pred.ratio = zscore*sd(ratio.exp)+mean(ratio.exp) #why do we need this???
newratios.calib$pred.ratio = pred.ratio
# Append y (predicted calibrated ratios) to calibrated data frame -- CALIBRATED RATIOS IN TERMS OF EXPERIMENTAL PARAMETERS
#no way of knowing if the pred.ratio and the correct starting quantities are lining up correctly #
#calib_data = cbind(calib_data,newratiosvector, pred.ratio)
# should the model be based off of the relation between startq and pred.ratio or zscore?
model = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$zscore, Hess = TRUE)
summary(model)
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
# Ordinal Logistic Regression Model - starting quantity as response to calibrated z-score
model = polr(as.factor(newratios.calib$startqvector) ~ newratios.calib$pred.ratio, Hess = TRUE)
summary(model)
(ctable <- coef(summary(model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
options(scipen=999)
## combined table
(ctable <- cbind(ctable, "p value" = p))
########
###PLOTS###
# Calibrated data - s.q. vs. ratio
plot(as.factor(newratios.calib$startqvector), as.numeric(newratios.calib$newratiosvector), xlab='Starting Quantity', ylab='Ratio',
main='2018_8 Calibrated Data - Starting Quantities vs. Ratios')
plot(as.factor(newratios.calib$startqvector), as.numeric(newratios.calib$zscore), xlab='Starting Quantity', ylab='Ratio',
main='2018_8 Calibrated Data - Starting Quantities vs. Ratios')
plot(as.factor(newratios.calib$startqvector), as.numeric(newratios.calib$pred.ratio), xlab='Starting Quantity', ylab='Ratio',
main='2018_8 Calibrated Data - Starting Quantities vs. Ratios')
###PLOTS###
# Calibrated data - s.q. vs. ratio
plot(as.factor(newratios.calib$startqvector), as.numeric(newratios.calib$newratiosvector), xlab='Starting Quantity', ylab='Ratio',
main='2018_8 Calibrated Data - Starting Quantities vs. Ratios')
plot(as.factor(newratios.calib$startqvector), as.numeric(newratios.calib$zscore), xlab='Starting Quantity', ylab='Z-score',
main='2018_8 Calibrated Data - Starting Quantities vs. Ratios')
plot(as.factor(newratios.calib$startqvector), as.numeric(newratios.calib$pred.ratio), xlab='Starting Quantity', ylab='Predicted Ratio',
main='2018_8 Calibrated Data - Starting Quantities vs. Ratios')
